
namespace ALittleIDE;

// 控件细腻些
public struct IDEControlInfo
{
	ALittle.DisplayInfo info;					// 控件内容
	string name;								// 控件名称
	Map<string, bool> extends_this;				// 继承自己的控件集合
	Map<string, bool> extends_other;			// 继承别人的控件集合
}

public class IDEUIManager
{
	private Map<string, IDEControlInfo> _control_map = new Map<string, IDEControlInfo>(); // 当前所有控件信息
	private string _base_path; // 基础路径
	private ALittle.ControlSystem _control; // 控制系统
    private string _module;	// 模块名

    // 依赖其他模块控件，KEY1:控件名 KEY2:模块名.控件名
    private Map<string, Map<string, bool>> _cur_map_other = new Map<string, Map<string, bool>>();
    // 依赖其他模块控件，KEY1:模块名.控件名 KEY2:控件名
    private Map<string, Map<string, bool>> _other_map_cur = new Map<string, Map<string, bool>>();

	public await fun Init(string module)
	{
        this._module = module;

        // 控件系统
		this._control = new ALittle.ControlSystem(this._module);
		this._control.log_error = false;
		this._control.cache_texture = false;
		this._control.use_plugin_class = false;

		// 遍历文件夹，加载所有控件
		this._base_path = ALittle.File_BaseFilePath().."Module/"..this._module.."/UI";

        [Language(JavaScript)]
        this._control.RegisterInfoByHttp();
        [Language(JavaScript)]
        for (var control_name, control_info in this._control.info_map)
        {
            var info = new Map<string, ALittle.DisplayInfo>();
            info[control_name] = control_info;
            ALittle.File_SaveFile(this._base_path.."/"..control_name..".json", ALittle.String_JsonEncode(info), -1);
        }

		// 加载UI文件夹内的所有json文件
		var file_map = ALittle.File_GetFileAttrByDir(this._base_path);
		for (var file_path, attr in file_map)
		{
			var ext = ALittle.String_Upper(ALittle.File_GetFileExtByPath(file_path));
			if (ext == "JSON")
			{
				// 读取文件内容
				var content = ALittle.File_ReadTextFromFile(file_path);
				if (content != null)
				{
					var error, content_info_map:Map<string, ALittle.DisplayInfo> = tcall(ALittle.String_JsonDecode, content);
					if (error == null)
					{
						for (var control_name, control_info in content_info_map)
						{
							// 获取信息
							var all_info = new IDEControlInfo();
							all_info.info = control_info;
							all_info.name = control_name;
							all_info.extends_this = new Map<string, bool>();
							all_info.extends_other = new Map<string, bool>();
							// 检查控件信息是否重复
							if (this._control_map[control_name] != null) ALittle.Log("IDEProject:OpenProject control_name:"..control_name.." repeat in "..file_path);
							// 保存信息
							this._control_map[control_name] = all_info;
						}
					}
					else
						ALittle.Log("IDEProject:OpenProject json decode failed:", file_path, content_info_map);
				}
				else
					ALittle.Log("IDEProject:OpenProject failed:", file_path);
			}
		}

		// 处理继承关系
		for (var control_name, all_info in this._control_map)
		{
			// 计算继承了哪些控件
			var map = IDEUIUtility_GetExtends(this._module, all_info.info);
            for (var module_name, sub_map in map)
            {
                for (var other_name, v in sub_map)
                {
                    if (module_name == this._module)
                    {
                        // 取出继承的那个控件，然后互相标记一下
                        var other = this._control_map[other_name];
                        if (other != null)
                        {
                            other.extends_this[control_name] = true;
                            all_info.extends_other[other_name] = true;
                        }
                        else
                            ALittle.Log("IDEProject:OpenProject calc extends failed:", other_name);
                    }
                    else
                    {
                        var full_name = module_name.."."..other_name;
                        // 计算当前控件依赖外部控件
                        var other_map = this._cur_map_other[control_name];
                        if (other_map == null)
                        {
                            other_map = new Map<string, bool>();
                            this._cur_map_other[control_name] = other_map;
                        }
                        other_map[full_name] = true;

                        // 计算外部控件被当前控件依赖
                        var cur_map = this._other_map_cur[full_name];
                        if (cur_map == null)
                        {
                            cur_map = new Map<string, bool>();
                            this._other_map_cur[full_name] = cur_map;
                        }
                        cur_map[control_name] = true;
                    }
                }
            }
		}
	}

	[Constant]
	public get control_map() : const Map<string, IDEControlInfo> { return this._control_map; }

    public get control() : ALittle.ControlSystem { return this._control; }

    public get texture_path() : string { return ALittle.File_BaseFilePath().."Module/"..this._module.."/Texture"; }

	// 计算出某个控件，继承了哪些控件，以及这些控件继承了哪些控件
	// 这个主要用于在新建控件时，避开循环继承
	public fun CalcDeepExtends(string name, Map<string, bool> map, Map<string, bool> lock_map) : Map<string, bool>
	{
		if (map == null) map = new Map<string, bool>();
		if (lock_map == null) lock_map = new Map<string, bool>();
		var info = this._control_map[name];
		if (info == null) return map;

		map[name] = true;
		// 遍历改控件，继承了其他哪些控件
		for (var other_name, v in info.extends_other)
		{
			if (lock_map[other_name] == null)
			{
				lock_map[other_name] = true;
				this.CalcDeepExtends(other_name, map, lock_map);
			}
			map[other_name] = true;
		}
		return map;
	}

	// 保存控件
	public fun SaveControl(string name, const ALittle.DisplayInfo info) : string
	{
		// 将信息保存到文件中
		var file_path = this._base_path.."/"..name..".json";
		// 创建一个保存映射表
		var save_info = new Map<string, ALittle.DisplayInfo>();
		save_info[name] = info;
		// 保存文件
		if (ALittle.File_SaveFile(file_path, ALittle.String_JsonEncode(save_info), -1) == false)
			return "文件保存失败:"..file_path;

		// 取出改控件原有信息
		var all_info = this._control_map[name];
		if (all_info != null)
		{
			// 注销原来的继承自己的关系
			for (var other_name, v in all_info.extends_other)
			{
				var other = this._control_map[other_name];
				if (other != null)
					other.extends_this[name] = null;
				else
					ALittle.Log("IDEProject:SaveControl calc extends failed:", other_name);
			}
            // 注销继承外部的关系
            var cur_map = this._cur_map_other[name];
            if (cur_map != null)
            {
                for (var full_name, _ in cur_map)
                {
                    var other_map = this._other_map_cur[full_name];
                    if (other_map != null) other_map[name] = null;
                    if (ALittle.IsEmpty(other_map)) this._other_map_cur[full_name] = null;
                }
                this._cur_map_other[name] = null;
            }
			// 清理对其他控件的继承关系
			all_info.extends_other = new Map<string, bool>();
			// 处理那些继承自己的控件，重新注册一下
			for (var other_name, v in all_info.extends_this)
			{
				var other = this._control_map[other_name];
				if (other != null)
					this._control.RegisterInfo(other.name, ALittle.String_CopyTable(other.info));
				else
					ALittle.Log("IDEProject:SaveControl calc extends failed:", other_name);
			}
		}
		else
		{
			all_info = new IDEControlInfo();
			all_info.info = info;
			all_info.name = name;
			all_info.extends_this = new Map<string, bool>();
			all_info.extends_other = new Map<string, bool>();
		}

		// 重新注册继承的那些控件
		var map = IDEUIUtility_GetExtends(this._module, info);
		for (var module_name, sub_map in map)
        {
            for (var other_name, v in sub_map)
            {
                if (module_name == this._module)
                {
                    // 取出继承的那个控件，然后互相标记一下
                    var other = this._control_map[other_name];
                    if (other != null)
                    {
                        other.extends_this[name] = true;
                        all_info.extends_other[other_name] = true;
                    }
                    else
                        ALittle.Log("IDEProject:OpenProject calc extends failed:", other_name);
                }
                else
                {
                    var other_map = this._cur_map_other[name];
                    if (other_map == null)
                    {
                        other_map = new Map<string, bool>();
                        this._cur_map_other[name] = other_map;
                    }
                    other_map[module_name..other_name] = true;

                    var cur_map = this._other_map_cur[module_name..other_name];
                    if (cur_map == null)
                    {
                        cur_map = new Map<string, bool>();
                        this._other_map_cur[module_name..other_name] = cur_map;
                    }
                    cur_map[name] = true;
                }
            }
        }
		all_info.info = info;
		// 设置到项目中
		this._control_map[name] = all_info;
		// 注册到UI系统
		this._control.RegisterInfo(name, ALittle.String_CopyTable(info));
		return null;
	}

	// 删除控件
	public fun CanDelete(string name) : string
	{
        // 检查控件是否存在
        var all_info = this._control_map[name];
        if (all_info == null) return "控件不存在:"..name;

            // 检查是否有被其他控件引用
        var extends_name:string = null;
        for (var k, v in all_info.extends_this)
        {
            extends_name = k;
            break;
        }
        if (extends_name != null) return "被其他控件引用:"..extends_name;

        var full_name = this._module.."."..name;
        for (var module_name, ui_manager in g_IDEProject.project.ui)
        {
            if (module_name != this._module)
            {
                var cur_map = ui_manager._other_map_cur[full_name];
                if (cur_map != null)
                {
                    for (var control_name, _ in cur_map)
                        return "被其他模块控件引用:"..module_name.."."..control_name;
                }
            }
        }

        return null;
	}

	// 删除
	public fun DeleteControl(string name) : string
	{
		// 检查是否能够删除
		var error = this.CanDelete(name);
		if (error != error) return error;
        
		// 删除文件
		var file_path = this._base_path.."/"..name..".json";
		ALittle.File_DeleteFile(file_path);

		// 取消引用别人的标记
		// 如果可以删除，说明并没有其他控件引用自己，所以不需要处理这块
		var all_info = this._control_map[name];
		for (var other_name, v in all_info.extends_other)
		{
			var other = this._control_map[other_name];
			if (other != null)
				other.extends_this[name] = null;
		}
    
        // 注销继承外部的关系
        var cur_map = this._cur_map_other[name];
        if (cur_map != null)
        {
            for (var full_name, _ in cur_map)
            {
                var other_map = this._other_map_cur[full_name];
                if (other_map != null) other_map[name] = null;
                if (ALittle.IsEmpty(other_map)) this._other_map_cur[full_name] = null;
            }
            this._cur_map_other[name] = null;
        }

        // 发送删除控件的事件
		var e = new IDEProjectDeleteControlEvent();
        e.module = this._module;
		e.name = name;
		g_IDEProject.DispatchEvent(e);
		// 从控件表中删除
		this._control_map[name] = null;

		// 从UI系统中删除
		this._control.UnRegisterInfo(name);

		// 调用
		return null;
	}

	// 重命名名控件（控件未保存是，不允许修改名称）
	public fun RenameControl(string old_name, string new_name) : string
	{
		// 检查控件是否存在
		var all_info = this._control_map[old_name];
		if (all_info == null) return "控件不存在:"..old_name;

		// 检查是否能够重命名
		var error = this.CanDelete(old_name);
		if (error != null) return "控件被其他控件引用，不能重命名";

		// 检查新名称是否已存在
		if (this._control_map[new_name] != null) return "控件已存在:"..new_name;

		// 注销控件
		var e = new IDEProjectDeleteControlEvent();
        e.module = this._module;
		e.name = old_name;
		g_IDEProject.DispatchEvent(e);

		// 清理控件信息
		this._control_map[old_name] = null;
		// 注销控件
		this._control.UnRegisterInfo(old_name);
		// 删除文件
		var file_path = this._base_path.."/"..old_name..".json";
		ALittle.File_DeleteFile(file_path);

		// 设置新的控件名并注册
		all_info.name = new_name;
		this._control_map[new_name] = all_info;
		this._control.RegisterInfo(new_name, ALittle.String_CopyTable(all_info.info));
		// 保存文件
		file_path = this._base_path.."/"..new_name..".json";
		var save_info = new Map<string, any>();
		save_info[new_name] = all_info.info;
		ALittle.File_SaveFile(file_path, ALittle.String_JsonEncode(save_info), -1);

		// 创建控件
        var ce = new IDEProjectCreateControlEvent();
        ce.module = this._module;
		ce.name = new_name;
		g_IDEProject.DispatchEvent(ce);

		return null;
	}
}