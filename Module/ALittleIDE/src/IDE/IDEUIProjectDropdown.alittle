
namespace ALittleIDE;

protected class IDEUIProjectDropdown : ALittle.DisplayLayout
{
	private ALittle.DropDown _current_project_name;		// 当前正在编辑的项目

	public fun TCtor()
	{
		this.UpdateProjectList();
		g_IDEProject.AddEventListener(this, this.HandleProjectOpen);
		g_IDEProject.AddEventListener(this, this.HandleProjectClose);
	}
	
	private fun HandleProjectOpen(IDEProjectOpenEvent event) { this.UpdateProjectList(); }
	private fun HandleProjectClose(IDEProjectCloseEvent event) { this.UpdateProjectList(); }
	
	// 更新项目下拉菜单
	private fun UpdateProjectList()
	{
		if (g_IDEProject.project == null)
			this._current_project_name.text = "当前没有打开的项目";
		else
			this._current_project_name.text = g_IDEProject.project.name;

		var data_list = new List<string>();
		var data_list_count = 0;
		var project_map = g_IDEConfig.GetConfig("project_map", new Map<string, string>());
		for (var k, v in project_map)
		{
			++ data_list_count;
			data_list[data_list_count] = v;
		}
		ALittle.List_Sort(data_list);
		var text = this._current_project_name.text;
		this._current_project_name.data_list = data_list;
		this._current_project_name.text = text;
	}

	private async fun HandlePeojectSelectChange(ALittle.UISelectChangedEvent event)
	{
		// 当前项目
		var name = "";
		if (g_IDEProject.project != null)
			name = g_IDEProject.project.name;

		// 要打开的项目
		var new_name = event.target.text;
		if (new_name == name) return;
	
		// 检查当前是否有项目并且是否保存
		if (g_IDECenter.center.content_edit.IsSaveAll())
		{
			// 打开项目
		    var error = g_IDEProject.OpenProject(new_name);
			if (error != null) g_AUITool.ShowNotice("错误", error);
			return;
		}

		// 设置新的项目名称
		event.target.text = name;
	
		var result = g_AUITool.SaveNotice("提示", "是否保存当前项目?");
		if (result == AUIPlugin.AUIToolOption.YES) g_IDECenter.center.content_edit.SaveAllTab();
		var error = g_IDEProject.OpenProject(new_name);
		if (error != null) g_AUITool.ShowNotice("错误", error);
	}   
}