
namespace ALittleIDE;

public struct IDETileClipboard
{
    Map<int, Map<int, ALittle.TileCell>> cell_map;
    Map<int, string> tex_map;	// 纹理ID映射的纹理路径
    int row_count;
    int col_count;
}

private var s_tile_clipboard:IDETileClipboard;

public class IDETileContainer : ALittle.DisplayLayout
{
    protected fun ClipRect(double x, double y, double width, double height, double h_move, double v_move)
    {
        for (var index, child in this.childs)
    		child.ClipRect(x - this._x, y - this._y, width - this._x, height - this._y, h_move, v_move);
    }
}

public class IDETileGroupContainer : ALittle.DisplayGroup
{
    protected fun ClipRect(double x, double y, double width, double height, double h_move, double v_move)
    {
        for (var index, child in this.childs)
    		child.ClipRect(x - this._x, y - this._y, width - this._x, height - this._y, h_move, v_move);
    }
}

public class IDETileLinearContainer : ALittle.DisplayLayout
{
    public ALittle.Linear _linear_grid_1;
    public ALittle.Linear _linear_grid_2;

    public ALittle.DisplayGroup _group_tile;

    protected fun ClipRect(double x, double y, double width, double height, double h_move, double v_move)
    {
        this._linear_grid_1.ClipRect(x - this._x, y - this._y, width - this._x, height - this._y, h_move, v_move);
        this._linear_grid_2.ClipRect(x - this._x, y - this._y, width - this._x, height - this._y, h_move, v_move);
        for (var index, child in this._group_tile.childs)
    		child.ClipRect(x - this._x, y - this._y, width - this._x, height - this._y, h_move, v_move);
    }
}

public class IDETileTabChild : IDETabChild
{
    private IDETileTreeUserInfo _user_info;
	private ALittle.ScrollScreen _tab_screen;        // 标签页
    private IDETileLinearContainer _tile_container;	// 容器
    private ALittle.DisplayLayout _tab_rb_quad;	// 操作

    private ALittle.DisplayLayout _tile_select_rect;

    // 格子
    private ALittle.Linear _linear_grid_1;
    private ALittle.Linear _linear_grid_2;

    private ALittle.DisplayGroup _group_tile;

    // 笔刷编辑区
    private IDEUITileLayerEdit _layer_edit;

    private int _drag_cell_row;
    private int _drag_cell_col;

    private double _select_x;
    private double _select_y;

	public ctor(ALittle.ControlSystem ctrl_sys, string module, string name, bool save, IDETileTreeUserInfo user_info)
	{
        // 保存携带信息
        this._user_info = user_info;

        // 分页滚动屏
		this._tab_screen = g_Control.CreateControl{ALittle.ScrollScreen}("ide_tile_tab_screen", this);
        this._tab_screen._user_data = this;
        this._tab_screen.container = new IDETileContainer(g_Control);

        // 格子线奇数行容器
        this._linear_grid_1 = new ALittle.Linear(g_Control);
        this._linear_grid_1.type = ALittle.UIEnumTypes.TYPE_V;
        this._tile_container._linear_grid_1 = this._linear_grid_1;
        this._tile_container.AddChild(this._linear_grid_1);

        // 格子线偶数行容器
        this._linear_grid_2 = new ALittle.Linear(g_Control);
        this._linear_grid_2.type = ALittle.UIEnumTypes.TYPE_V;
        this._tile_container._linear_grid_2 = this._linear_grid_2;
        this._tile_container.AddChild(this._linear_grid_2);

        // 其他物件的容器
        this._group_tile = new ALittle.DisplayGroup(g_Control);
        this._tile_container._group_tile = this._group_tile;
        this._tile_container.AddChild(this._group_tile);

        // 地图层管理
        this._layer_edit = g_Control.CreateControl{IDEUITileLayerEdit}("ide_tile_layer_detail_layout");

        // 处理拖拽，选中
        g_IDECenter.center.AddEventListener(this, this.HandleHandDrag);
        g_IDECenter.center.AddEventListener(this, this.HandleSelect);

        // 选中区域
        this._tile_select_rect.visible = false;
        
        // 选中操作
        this._tab_rb_quad.AddEventListener(this, this.HandleQuadLButtonDown);
        this._tab_rb_quad.AddEventListener(this, this.HandleQuadRButtonDown);
        this._tab_rb_quad.AddEventListener(this, this.HandleQuadDragBegin);
        this._tab_rb_quad.AddEventListener(this, this.HandleQuadDrag);
        this._tab_rb_quad.AddEventListener(this, this.HandleQuadDragEnd);
        this._tab_rb_quad.AddEventListener(this, this.HandleQuadKeyDown);
    }

    // 选中拖拽工具
    private fun HandleHandDrag(IDEUICenterTileHandDragOpChangedEvent event)
    {
        this._tab_rb_quad.hand_cursor = event.value;
    }

    // 选中选择工具
    private fun HandleSelect(IDEUICenterTileSelectOpChangedEvent event)
    {
        this._tile_select_rect.visible = false;
    }

    // 处理按键
    private fun HandleQuadKeyDown(ALittle.UIKeyDownEvent event)
    {
        // Ctrl + C
        if (event.sym == ALittle.UIEnumTypes.KEY_C && ALittle.UIEnumTypes.KEY_CTRL & event.mod != 0)
        {
            if (g_IDECenter.center.tile_select && this._tile_select_rect.visible)
            	this.HandleSelectCopy();
        }

        // Ctrl + X
        if (event.sym == ALittle.UIEnumTypes.KEY_X && ALittle.UIEnumTypes.KEY_CTRL & event.mod != 0)
        {
            if (g_IDECenter.center.tile_select && this._tile_select_rect.visible)
            	this.HandleSelectCut();
        }

        // Ctrl + V
        if (event.sym == ALittle.UIEnumTypes.KEY_V && ALittle.UIEnumTypes.KEY_CTRL & event.mod != 0)
        {
            var rel_x, rel_y = this._tab_rb_quad.GlobalToLocalMatrix2D(A_UISystem.mouse_x, A_UISystem.mouse_y);
            this.HandleSelectPaste(rel_x, rel_y);
        }
    }

    // 处理右键按钮按下
    private fun HandleQuadRButtonDown(ALittle.UIRButtonDownEvent event)
    {
        // 如果选中选择工具
        if (g_IDECenter.center.tile_select)
        {
            // 选中范围
            if (this._tile_select_rect.visible)
            {
                var menu = new AUIPlugin.AUIRightMenu();
                menu.AddItem("复制", bind(this.HandleSelectCopy, this));
                menu.AddItem("剪切", bind(this.HandleSelectCut, this));
                menu.AddItem("粘贴", bind(this.HandleSelectPaste, this, event.rel_x, event.rel_y));
                menu.Show();
            }
            else
            {
                var menu = new AUIPlugin.AUIRightMenu();
                menu.AddItem("粘贴", bind(this.HandleSelectPaste, this, event.rel_x, event.rel_y));
                menu.Show();
            }
        }
    }

    // 根据选中区域计算行列
    private fun CalcSelectTileRectByPos(IDEUITileLayerInfo layer, double x, double y, double width, double height) : IDETileClipboard, int, int, int, int
    {
        var begin_row, begin_col = ALittle.Tile_CalcRowColByPos(this._user_info.tile_map, x, y);
        if (begin_row <= 0 || begin_col <= 0) return null, null, null, null, null;
        var end_row, end_col = ALittle.Tile_CalcRowColByPos(this._user_info.tile_map, x + width, y + height);
        if (end_row <= 0 || end_col <= 0) return null, null, null, null, null;
        var clipboard = this.CalcSelectTileRectByRowCol(layer, begin_row, begin_col, end_row, end_col);
        return clipboard, begin_row, begin_col, end_row, end_col;
    }

    // 根据选中行列获取选中的格子
    private fun CalcSelectTileRectByRowCol(IDEUITileLayerInfo layer, int begin_row, int begin_col, int end_row, int end_col) : IDETileClipboard
    {
        var clipboard = new IDETileClipboard();
        clipboard.cell_map = new Map<int, Map<int, ALittle.TileCell>>();
        clipboard.tex_map = new Map<int, string>();
        clipboard.row_count = end_row - begin_row + 1;
        clipboard.col_count = end_col - begin_col + 1;
        for (var row = begin_row; row <= end_row; 1)
        {
            var row_cell = layer._layer.cell_map[row];
            if (row_cell != null)
            {
                for (var col = begin_col; col <= end_col; 1)
                {
                    var cell = row_cell[col];
                    if (cell != null)
                    {
                        var clip_row = clipboard.cell_map[row - begin_row + 1];
                        if (clip_row == null)
                        {
                            clip_row = new Map<int, ALittle.TileCell>();
                            clipboard.cell_map[row - begin_row + 1] = clip_row;
                        }
                        clip_row[col - begin_col + 1] = ALittle.String_CopyTable(cell);

                        if (cell.tex_id != null)
                            clipboard.tex_map[cell.tex_id] = this._user_info.tile_map.tex_map[cell.tex_id];
                    }
                }
            }
        }

        return clipboard;
    }

    // 将选中的格子拷贝到内部剪切板
    private fun HandleSelectCopy()
    {
        var cur_layer = this._layer_edit.GetCurLayerInfo();
        if (cur_layer == null)
        {
            g_AUITool.ShowNotice("提示","请先选中层");
            return;
        }

        var clipboard = this.CalcSelectTileRectByPos(cur_layer
                                               , this._tile_select_rect.x
                                               , this._tile_select_rect.y
                                               , this._tile_select_rect.width
                                               , this._tile_select_rect.height);
        if (clipboard == null) return;
        s_tile_clipboard = clipboard;
    }

    // 将选中的格子剪切
    private fun HandleSelectCut()
    {
        var cur_layer, index = this._layer_edit.GetCurLayerInfo();
        if (cur_layer == null)
        {
            g_AUITool.ShowNotice("提示","请先选中层");
            return;
        }

        var clipboard, begin_row, begin_col, end_row, end_col = this.CalcSelectTileRectByPos(cur_layer
                                                                                       , this._tile_select_rect.x
                                                                                       , this._tile_select_rect.y
                                                                                       , this._tile_select_rect.width
                                                                                       , this._tile_select_rect.height);
        if (clipboard == null) return;
        s_tile_clipboard = clipboard;

        var revoke = new IDETileSelectCutRevoke(this, cur_layer, clipboard, begin_row, begin_col, end_row, end_col);
        this._revoke_list.PushRevoke(revoke);
        revoke.Forward();

        this.save = false;
    }

    // 黏贴剪切板
    private fun HandleSelectPaste(double rel_x, double rel_y)
    {
        var cur_layer, index = this._layer_edit.GetCurLayerInfo();
        if (cur_layer == null)
        {
            g_AUITool.ShowNotice("提示","请先选中层");
            return;
        }

        if (s_tile_clipboard == null) return;
        var row_count, col_count = this.GetRowColCount();
        var begin_row, begin_col = ALittle.Tile_CalcRowColByPos(this._user_info.tile_map
                                                               , rel_x
                                                               , rel_y);
        if (begin_row > row_count || begin_col > col_count) return;

        var end_row = begin_row + s_tile_clipboard.row_count - 1;
        var end_col = begin_col + s_tile_clipboard.col_count - 1;
        if (end_row >= row_count) end_row = row_count;
        if (end_col >= col_count) end_col = col_count;

        var old_clipboard = this.CalcSelectTileRectByRowCol(cur_layer, begin_row, begin_col, end_row, end_col);
        if (old_clipboard == null) return;

        var revoke = new IDETileSelectPasteRevoke(this, cur_layer, old_clipboard, s_tile_clipboard, begin_row, begin_col, end_row, end_col);
        this._revoke_list.PushRevoke(revoke);
        revoke.Forward();

        this.save = false;
    }

    // 鼠标左键按下编辑
    private fun HandleQuadLButtonDown(ALittle.UILButtonDownEvent event)
    {
        // 处理笔刷
        if (g_IDECenter.center.tile_brush)
        {
            var brush_info = g_IDECenter.center.tile_brush_edit.GetBrush();
            if (brush_info == null)
            {
                g_AUITool.ShowNotice("提示", "请先从地块库选择地块");
                return;
            }

            var layer_info, layer_index = this._layer_edit.GetCurLayerInfo();
            if (layer_info == null)
            {
                g_AUITool.ShowNotice("提示", "请先选择图层");
                return;
            }

            // 获取行列
            var row, col = ALittle.Tile_CalcRowColByPos(this._user_info.tile_map, event.rel_x, event.rel_y);
            if (row <= 0 || col <= 0) return;

            // 对地图大小进行合理扩大
            this.ResizeGridMap(row, col);
            this._drag_cell_row = row;
            this._drag_cell_col = col;

            // 获取cell，没有就构建一个
            var col_map = layer_info._layer.cell_map[row];
            if (col_map == null)
            {
                col_map = new Map<int, ALittle.TileCell>();
                layer_info._layer.cell_map[row] = col_map;
            }
            var cell = col_map[col];
            if (cell == null)
            {
                cell = new ALittle.TileCell();
                col_map[col] = cell;
            }
            // 获取旧的纹理路径
            var old_tex_path:string;
            if (cell.tex_id != null) old_tex_path = layer_info._user_info.tile_map.tex_map[cell.tex_id];
            // 获取纹理id，如果没有就构建一个
            var tex_id = layer_info._user_info.tex_id_map[brush_info.tex_path];
            if (tex_id == null)
            {
                tex_id = layer_info._user_info.tex_id_max + 1;
                layer_info._user_info.tex_id_max = tex_id;
                layer_info._user_info.tex_id_map[brush_info.tex_path] = tex_id;
                layer_info._user_info.tile_map.tex_map[tex_id] = brush_info.tex_path;
            }
            // 保存新的纹理id
            cell.tex_id = tex_id;

            // 创建图像
            var image = this.GetImage(layer_index, row, col);
            // 设置图片
            image.SetTextureCut(brush_info.module_path, 0, 0, true);

            // 创建撤销对象
            var revoke = new IDETileBrushCellRevoke(this, layer_info, cell, image, old_tex_path, brush_info.tex_path);
            this._revoke_list.PushRevoke(revoke);

            this.save = false;
        }
        // 处理橡皮擦
        elseif (g_IDECenter.center.tile_erase)
        {
            var layer_info, layer_index = this._layer_edit.GetCurLayerInfo();
            if (layer_info == null)
            {
                g_AUITool.ShowNotice("提示", "请先选择图层");
                return;
            }

            // 获取行列
            var row, col = ALittle.Tile_CalcRowColByPos(this._user_info.tile_map, event.rel_x, event.rel_y);
            if (row <= 0 || col <= 0) return;

            // 对地图大小进行合理扩大
            this.ResizeGridMap(row, col);
            this._drag_cell_row = row;
            this._drag_cell_col = col;

            // 获取cell
            var col_map = layer_info._layer.cell_map[row];
            if (col_map == null) return;
            var cell = col_map[col];
            if (cell == null) return;
            if (cell.tex_id == null) return;

            // 获取旧的纹理路径
            var old_tex_path = layer_info._user_info.tile_map.tex_map[cell.tex_id];
            // 把纹理设置为空
            cell.tex_id = null;

            // 创建image
            var image = this.GetImage(layer_index, row, col);
            // 把图片设置为空
            image.SetTextureCut(null, 0, 0, true);

            // 创建撤销对象
            var revoke = new IDETileBrushCellRevoke(this, layer_info, cell, image, old_tex_path, null);
            this._revoke_list.PushRevoke(revoke);

            this.save = false;
        }
    }

    // 开始拖拽
    private fun HandleQuadDragBegin(ALittle.UIButtonDragBeginEvent event)
    {
        // 拖拽工具
        if (g_IDECenter.center.tile_handdrag)
        {
            // 把事件转发给滚动屏幕
            event.target = this._tab_screen;
            this._tab_screen.DispatchEvent(event);
        }
        // 选中工具
        elseif (g_IDECenter.center.tile_select)
        {
            this._select_x = event.rel_x;
            this._select_y = event.rel_y;

            this._tile_select_rect.visible = true;
            this._tile_select_rect.width = 0;
            this._tile_select_rect.height = 0;
            this._tile_select_rect.x = this._select_x;
            this._tile_select_rect.y = this._select_y;
        }
    }

    // 处理拖拽
    private fun HandleQuadDrag(ALittle.UIButtonDragEvent event)
    {
        // 笔刷工具
        if (g_IDECenter.center.tile_brush)
        {
            var brush_info = g_IDECenter.center.tile_brush_edit.GetBrush();
            if (brush_info == null) return;

            var layer_info, layer_index = this._layer_edit.GetCurLayerInfo();
            if (layer_info == null) return;

            // 计算行列
            var row, col = ALittle.Tile_CalcRowColByPos(this._user_info.tile_map, event.rel_x, event.rel_y);
            if (row <= 0 || col <= 0) return;

            // 重置大小
            this.ResizeGridMap(row, col);
            // 如果和上次的位置一样，那么就直接返回
            if (this._drag_cell_row == row && this._drag_cell_col == col) return;
            this._drag_cell_row = row;
            this._drag_cell_col = col;
            
            // 获取cell，没有就创建
            var col_map = layer_info._layer.cell_map[row];
            if (col_map == null)
            {
                col_map = new Map<int, ALittle.TileCell>();
                layer_info._layer.cell_map[row] = col_map;
            }
            var cell = col_map[col];
            if (cell == null)
            {
                cell = new ALittle.TileCell();
                col_map[col] = cell;
            }

            // 获取旧的纹理路径
            var old_tex_path:string;
            if (cell.tex_id != null) old_tex_path = layer_info._user_info.tile_map.tex_map[cell.tex_id];
            // 获取纹理id，没有就创建一个
            var tex_id = layer_info._user_info.tex_id_map[brush_info.tex_path];
            if (tex_id == null)
            {
                tex_id = layer_info._user_info.tex_id_max + 1;
                layer_info._user_info.tex_id_max = tex_id;
                layer_info._user_info.tex_id_map[brush_info.tex_path] = tex_id;
                layer_info._user_info.tile_map.tex_map[tex_id] = brush_info.tex_path;
            }
            // 设置纹理id
            cell.tex_id = tex_id;

            // 获取image
            var image = this.GetImage(layer_index, row, col);
            // 设置image纹理
            image.SetTextureCut(brush_info.module_path, 0, 0, true);

            // 创建撤销对象
            var revoke = new IDETileBrushCellRevoke(this, layer_info, cell, image, old_tex_path, brush_info.tex_path);
            this._revoke_list.PushRevoke(revoke);

            this.save = false;
        }
        // 处理拖拽
        elseif (g_IDECenter.center.tile_handdrag)
        {
            // 转发给滚动屏幕
            event.target = this._tab_screen;
            this._tab_screen.DispatchEvent(event);
        }
        // 处理橡皮擦
        elseif (g_IDECenter.center.tile_erase)
        {
            var layer_info, layer_index = this._layer_edit.GetCurLayerInfo();
            if (layer_info == null) return;

            // 计算行列
            var row, col = ALittle.Tile_CalcRowColByPos(this._user_info.tile_map, event.rel_x, event.rel_y);
            if (row <= 0 || col <= 0) return;

            // 重置大小
            this.ResizeGridMap(row, col);
            // 如果和上一个位置一样，那么就直接返回
            if (this._drag_cell_row == row && this._drag_cell_col == col) return;
            this._drag_cell_row = row;
            this._drag_cell_col = col;

            // 获取cell，没有就return
            var col_map = layer_info._layer.cell_map[row];
            if (col_map == null) return;
            var cell = col_map[col];
            if (cell == null) return;
            if (cell.tex_id == null) return;

            // 获取旧的纹理路径
            var old_tex_path = layer_info._user_info.tile_map.tex_map[cell.tex_id];
            // 清空纹理id
            cell.tex_id = null;

            // 获取image
            var image = this.GetImage(layer_index, row, col);
            // 设置image的纹理为空
            image.SetTextureCut(null, 0, 0, true);

            // 创建撤销对象
            var revoke = new IDETileBrushCellRevoke(this, layer_info, cell, image, old_tex_path, null);
            this._revoke_list.PushRevoke(revoke);

            this.save = false;
        }
        // 处理选中区域
        elseif (g_IDECenter.center.tile_select)
        {
            if (event.rel_x > this._select_x)
            {
                this._tile_select_rect.x = this._select_x;
                this._tile_select_rect.width = event.rel_x - this._select_x;
            }
            else
            {
                this._tile_select_rect.x = event.rel_x;
                this._tile_select_rect.width = this._select_x - event.rel_x;
            }

            if (event.rel_y > this._select_y)
            {
                this._tile_select_rect.y = this._select_y;
                this._tile_select_rect.height = event.rel_y - this._select_y;
            }
            else
            {
                this._tile_select_rect.y = event.rel_y;
                this._tile_select_rect.height = this._select_y - event.rel_y;
            }
        }
    }

    // 拖拽结束
    private fun HandleQuadDragEnd(ALittle.UIButtonDragEndEvent event)
    {
        if (g_IDECenter.center.tile_brush)
        {
        }
        elseif (g_IDECenter.center.tile_handdrag)
        {
            event.target = this._tab_screen;
            this._tab_screen.DispatchEvent(event);
        }
        elseif (g_IDECenter.center.tile_erase)
        {

        }
        elseif (g_IDECenter.center.tile_select)
        {

        }

        this._drag_cell_row = null;
        this._drag_cell_col = null;
    }

    // 获取层编辑控件
    public get layer_edit() : IDEUITileLayerEdit { return this._layer_edit; }

    private fun OnUndo() { }
    private fun OnRedo() { }
    private fun OnHide()
    {
        g_IDECenter.center.tool_tile.visible = false;
        this._layer_edit.visible = false;
    }
    private fun OnShow()
    {
        g_IDECenter.center.HideAllToolContainer();
        g_IDECenter.center.tool_tile.visible = true;
        this._layer_edit.visible = true;
        g_IDECenter.center.detail_tree_tab.tab = g_IDECenter.center.tile_brush_edit;
        g_IDECenter.center.project_edit_tab.tab = g_IDECenter.center.tile_brush_list;
    }

    private fun OnClose()
    {
		g_IDECenter.center.tile_brush_edit.layer_container.RemoveChild(this._layer_edit);
    }

    private fun OnOpen()
    {
        this._revoke_list = new ALittle.RevokeList(10000);
		g_IDECenter.center.tile_brush_edit.layer_container.AddChild(this._layer_edit);
    }

    private fun OnTabRightMenu(AUIPlugin.AUIRightMenu menu)
    {
		menu.AddItem("获取焦点", bind(this.ShowTileFocus, this));
    }

    public fun ShowTileFocus()
    {
        var tree = g_IDECenter.center.tile_list.GetFileTree(this._user_info.info.path);
        if (tree == null) return;

        g_IDECenter.center.project_edit_tab.tab = g_IDECenter.center.tile_list;
        g_IDECenter.center.tile_list.ShowTreeItemFocus(tree);
    }

    // 创建层
    public fun CreateLayer() : ALittle.DisplayGroup, ALittle.Linear, ALittle.Linear
    {
        // 创建其他组件容器
        var group = new ALittle.DisplayGroup(g_Control);

        // 创建地块奇数行容器
        var linear_1 = new ALittle.Linear(g_Control);
        linear_1.type = ALittle.UIEnumTypes.TYPE_V;
        group.AddChild(linear_1);

        // 创建地块偶数行容器
        var linear_2 = new ALittle.Linear(g_Control);
        linear_2.type = ALittle.UIEnumTypes.TYPE_V;
        linear_2.x = ALittle.Tile_CalcLinear2OffsetX(this._user_info.tile_map);
        linear_2.y = ALittle.Tile_CalcLinear2OffsetY(this._user_info.tile_map);
        group.AddChild(linear_2);

        // 添加到
        this._group_tile.AddChild(group);

        var row_count, col_count = this.GetRowColCount();
        this.ResizeLinear(linear_1, linear_2, row_count, col_count, this._group_tile.child_count);
        return group, linear_1, linear_2;
    }

    // 计算当前行列
    public fun GetRowColCount() : int, int
    {
        var cur_row_count = 0;
        var cur_col_count = 0;
        if (this._user_info.tile_map.tile_type == ALittle.TileType.HEX_V)
        {
            cur_row_count = this._linear_grid_1.child_count + this._linear_grid_2.child_count;
            if (cur_row_count > 0) cur_col_count = this._linear_grid_1.childs[1].child_count;
        }
        else
        {
            cur_row_count = this._linear_grid_1.child_count;
            if (cur_row_count > 0) cur_col_count = this._linear_grid_1.childs[1].child_count + this._linear_grid_2.childs[1].child_count;
        }
        return cur_row_count, cur_col_count;
    }

    // 获取层，以及对应的格子行容器
    public fun GetLayer(int index) : ALittle.DisplayGroup, ALittle.Linear, ALittle.Linear
    {
        var group = cast<ALittle.DisplayGroup>(this._group_tile.GetChildByIndex(index));
        if (group == null) return null, null, null;
        var linear_1 = cast<ALittle.Linear>(group.GetChildByIndex(1));
        var linear_2 = cast<ALittle.Linear>(group.GetChildByIndex(2));
        return group, linear_1, linear_2;
    }

    // 获取对应格子的image
    public fun GetImage(int layer, int row, int col) : ALittle.Image
    {
        var group, linear_1, linear_2 = this.GetLayer(layer);
        if (group == null) return null;

        var tile_type = this._user_info.tile_map.tile_type;

        if (tile_type == ALittle.TileType.HEX_V)
        {
            if (row % 2 == 1)
            {
                var sub_linear = linear_1.childs[ALittle.Math_Floor(row / 2) + 1];
                if (sub_linear == null) return null;
                var child = sub_linear.childs[col];
                if (child == null) return null;
                return child._user_data;
            }

            var sub_linear = linear_2.childs[ALittle.Math_Floor(row / 2)];
            if (sub_linear == null) return null;
            var child = sub_linear.childs[col];
            if (child == null) return null;
            return child._user_data;
        }
        else
        {
            if (col % 2 == 1)
            {
                var sub_linear = linear_1.childs[row];
                if (sub_linear == null) return null;
                var child = sub_linear.childs[ALittle.Math_Floor(col / 2) + 1];
                if (child == null) return null;
                return child._user_data;
            }
                
            var sub_linear = linear_2.childs[row];
            if (sub_linear == null) return null;
            var child = sub_linear.childs[ALittle.Math_Floor(col / 2)];
            if (child == null) return null;
            return child._user_data;
        }
    }

    // 添加层
    public fun AddLayer(ALittle.DisplayGroup group, int index)
    {
        this._group_tile.AddChild(group, index);
    }

    // 移除层
    public fun RemoveLayer(ALittle.DisplayGroup group)
    {
        this._group_tile.RemoveChild(group);
    }

    public fun SetLayerIndex(ALittle.DisplayGroup group, int index)
    {
        this._group_tile.SetChildIndex(group, index);
    }

    // 标检容器子控件
    public get tab_body() : ALittle.DisplayObject { return this._tab_screen; }

    public set save(bool value)
    {
        if (this._save == value) return;
		if (value == false)
        {
            this._save = false;
            this.UpdateTitle();
            return;
		}

        var ui = g_IDEProject.project.ui[g_IDEProject.project.name];
        if (ui == null)
        {
            g_AUITool.ShowNotice("提示", "ui不存在");
            return;
        }

        // 计算行列
        var row_count = 0;
        var col_count = 0;
        for (var index, layer in this._user_info.tile_map.layer_list)
        {
            for (var row, cell_map in layer.cell_map)
            {
                for (var col, cell in cell_map)
                {
                    if (col > col_count) col_count = col;
                }
                if (row > row_count) row_count = row;
            }
        }
        this._user_info.tile_map.row_count = row_count;
        this._user_info.tile_map.col_count = col_count;
    
        ui.control.WriteMessageToFile(this._user_info.tile_map, this._user_info.info.path);

        this._save = value;
        this.UpdateTitle();
	}

    public get id() : string { return this._user_info.info.path; }

	public fun Rename(string name)
    {
        this._name = name;
        this.UpdateTitle();
	}

	public fun UpdateTitle()
    {
        var text = this._name;
        if (this._save == false) text = text.." *";
        g_IDECenter.center.content_edit.main_tab.SetChildText(this._tab_screen, text);
	}

	public get title() : string
    {
        return this._name;
	}

    public fun UpdateUserInfo(IDETileTreeUserInfo info)
    {
        this._user_info = info;
    }

    // 根据携带信息，创建内容
    public fun CreateBySelect(IDETileTreeUserInfo info)
    {
        this._user_info = info;

        info.tex_id_map = new Map<string, int>();
        info.tex_id_max = 0;
        for (var tex_id, tex_path in info.tile_map.tex_map)
        {
        	info.tex_id_map[tex_path] = tex_id;
            if (info.tex_id_max < tex_id) info.tex_id_max = tex_id;
        }

        var col_count = info.tile_map.col_count;
        if (col_count < 10) col_count = 10;
        var row_count = info.tile_map.row_count;
        if (row_count < 10) row_count = 10;

        // 计算格子的宽高
        var grid_map_width = ALittle.Tile_CalcCellWidth(this._user_info.tile_map) * col_count;

        // 初始化格子linear
        this._linear_grid_1.width = grid_map_width;
        this._linear_grid_2.width = grid_map_width;
        this._linear_grid_2.x = ALittle.Tile_CalcLinear2OffsetX(this._user_info.tile_map);
        this._linear_grid_2.y = ALittle.Tile_CalcLinear2OffsetY(this._user_info.tile_map);

        // 创建层
        for (var index, layer in info.tile_map.layer_list)
        {
            // 地块容器
            var group = new ALittle.DisplayGroup(g_Control);

            // 地块奇数行容器
            var linear_1 = new ALittle.Linear(g_Control);
            linear_1.type = ALittle.UIEnumTypes.TYPE_V;
            linear_1.width = grid_map_width;
            group.AddChild(linear_1);

            // 地块偶数行容器
            var linear_2 = new ALittle.Linear(g_Control);
            linear_2.type = ALittle.UIEnumTypes.TYPE_V;
            linear_2.width = grid_map_width;
            linear_2.x = ALittle.Tile_CalcLinear2OffsetX(this._user_info.tile_map);
            linear_2.y = ALittle.Tile_CalcLinear2OffsetY(this._user_info.tile_map);
            group.AddChild(linear_2);

            // 添加到tile
            this._group_tile.AddChild(group);
        }
        
        // 重新设置格子地图的大小
        this.ResizeGridMap(row_count, col_count);

        // 设置图片
        for (var index, layer in this._user_info.tile_map.layer_list)
        {
            for (var row, col_map in layer.cell_map)
            {
                for (var col, cell in col_map)
                {
                    if (cell.tex_id != null)
                    {
                        var texture_name = this._user_info.tile_map.tex_map[cell.tex_id];
                        if (texture_name != null)
                        {
                            var image = this.GetImage(index, row, col);
                            image.SetTextureCut("Module/"..g_IDEProject.project.name.."/Texture/"..texture_name, 0, 0, true);
                        }
                    }
                }
            }
        }

        // 初始化层编辑器
        this._layer_edit.Init(this, this._user_info);
        // 裁剪
        this._tab_screen.RefreshClipDisLine();
    }

    // 扩大或缩小容器
    private fun ResizeLinear(ALittle.Linear linear_1, ALittle.Linear linear_2, int row_count, int col_count, int layer)
    {
        if (this._user_info.tile_map.tile_type == ALittle.TileType.HEX_V)
        {
            if (row_count <= linear_1.child_count + linear_2.child_count && col_count <= linear_1.childs[1].child_count) return;

            linear_1.width = ALittle.Tile_CalcCellWidth(this._user_info.tile_map) * col_count;
            linear_2.width = linear_1.width;

            var linear_height = ALittle.Tile_CalcCellHeight(this._user_info.tile_map);

            for (var index, child:ALittle.Linear in linear_1.childs)
            {
                for (var col = child.child_count + 1; col <= col_count; 1)
                {
                    if (layer == 0)
                        child.AddChild(this.CreateGrid());
                    else
                        child.AddChild(this.CreateImage());
                }
            }

            for (var index, child in linear_2.childs)
            {
                for (var col = child.child_count + 1; col <= col_count; 1)
                {
                    if (layer == 0)
                        child.AddChild(this.CreateGrid());
                    else
                        child.AddChild(this.CreateImage());
                }
            }

            for (var row = linear_1.child_count + linear_2.child_count + 1; row <= row_count; 1)
            {
                var linear = new ALittle.Linear(g_Control);
                linear.type = ALittle.UIEnumTypes.TYPE_H;
                linear.height = linear_height;
                for (var col = 1; col <= col_count; 1)
                {
                    if (layer == 0)
                        linear.AddChild(this.CreateGrid());
                    else
                        linear.AddChild(this.CreateImage());
                }

                if (row % 2 == 1)
                    linear_1.AddChild(linear);
                else
                    linear_2.AddChild(linear);
            }
        }
        else
        {
            if (row_count <= linear_1.child_count && col_count <= linear_1.childs[1].child_count + linear_2.childs[1].child_count) return;

            var cell_width = ALittle.Tile_CalcCellWidth(this._user_info.tile_map);
            var linear_height = ALittle.Tile_CalcCellHeight(this._user_info.tile_map);

            var col_count_1 = ALittle.Math_Ceil(col_count / 2);
            linear_1.width = cell_width * col_count_1;
            for (var index, child:ALittle.Linear in linear_1.childs)
            {
                for (var col = child.child_count + 1; col <= col_count_1; 1)
                {
                    if (layer == 0)
                        child.AddChild(this.CreateGrid());
                    else
                        child.AddChild(this.CreateImage());
                }
            }

            var col_count_2 = ALittle.Math_Floor(col_count / 2);
            linear_2.width = cell_width * col_count_2;
            for (var index, child in linear_2.childs)
            {
                for (var col = child.child_count + 1; col <= col_count_2; 1)
                {
                    if (layer == 0)
                        child.AddChild(this.CreateGrid());
                    else
                        child.AddChild(this.CreateImage());
                }
            }

            for (var row = linear_1.child_count + 1; row <= row_count; 1)
            {
                var linear = new ALittle.Linear(g_Control);
                linear.type = ALittle.UIEnumTypes.TYPE_H;
                linear.height = linear_height;
                for (var col = 1; col <= col_count_1; 1)
                {
                    if (layer == 0)
                        linear.AddChild(this.CreateGrid());
                    else
                        linear.AddChild(this.CreateImage());
                }
                linear_1.AddChild(linear);
            }

            for (var row = linear_2.child_count + 1; row <= row_count; 1)
            {
                var linear = new ALittle.Linear(g_Control);
                linear.type = ALittle.UIEnumTypes.TYPE_H;
                linear.height = linear_height;
                for (var col = 1; col <= col_count_2; 1)
                {
                    if (layer == 0)
                        linear.AddChild(this.CreateGrid());
                    else
                        linear.AddChild(this.CreateImage());
                }
                linear_2.AddChild(linear);
            }
        }
    }

    // 重置格子行列数量
    private fun ResizeGridMap(int row_count, int col_count)
    {
        var cur_row_count = 0;
        var cur_col_count = 0;
        if (this._user_info.tile_map.tile_type == ALittle.TileType.HEX_V)
        {
            cur_row_count = this._linear_grid_1.child_count + this._linear_grid_2.child_count;
            if (cur_row_count > 0) cur_col_count = this._linear_grid_1.childs[1].child_count;
        }
        else
        {
            cur_row_count = this._linear_grid_1.child_count;
            if (cur_row_count > 0) cur_col_count = this._linear_grid_1.childs[1].child_count + this._linear_grid_2.childs[1].child_count;
        }

        if (row_count < cur_row_count) row_count = cur_row_count;
        if (col_count < cur_col_count) col_count = cur_col_count;

        this.ResizeLinear(this._linear_grid_1, this._linear_grid_2, row_count, col_count, 0);
        for (var index, group:ALittle.DisplayGroup in this._group_tile.childs)
        	this.ResizeLinear(cast<ALittle.Linear>(group.GetChildByIndex(1)), cast<ALittle.Linear>(group.GetChildByIndex(2)), row_count, col_count, index);

        var width_1 = this._linear_grid_1.x + this._linear_grid_1.width;
        var width_2 = this._linear_grid_2.x + this._linear_grid_2.width;
        
        var height_1 = this._linear_grid_1.y + this._linear_grid_1.height;
        var height_2 = this._linear_grid_2.y + this._linear_grid_2.height;

        this._tab_screen.container.width = ALittle.Math_Max(width_1, width_2) + 100;
        this._tab_screen.container.height = ALittle.Math_Max(height_1, height_2) + 100;
        this._tab_screen.AdjustScrollBar();
    }

    // 创建格子
    private fun CreateGrid() : ALittle.DisplayObject
    {
        var tile_type = this._user_info.tile_map.tile_type;
    	var side_len = this._user_info.tile_map.side_len;

        if (tile_type == ALittle.TileType.SQUARE)
        {
            var cell = new ALittle.DisplayLayout(g_Control);
            cell.width = ALittle.Tile_CalcCellWidth(this._user_info.tile_map);
            var grid = g_Control.CreateControl{ALittle.DisplayObject}("ide_tile_square_grid");
            grid.width = side_len;
            grid.height = side_len;
            cell.AddChild(grid);
            return cell;
        }

        if (tile_type == ALittle.TileType.HEX_V)
        {
            var cell = new ALittle.DisplayLayout(g_Control);
            cell.width = ALittle.Tile_CalcCellWidth(this._user_info.tile_map);
            var grid = g_Control.CreateControl{ALittle.DisplayObject}("ide_tile_hex_v_grid");
            grid.width = side_len * 1.732;
            grid.height = side_len * 2;
            cell.AddChild(grid);
            return cell;
        }

        if (tile_type == ALittle.TileType.HEX_H)
        {
            var cell = new ALittle.DisplayLayout(g_Control);
            cell.width = ALittle.Tile_CalcCellWidth(this._user_info.tile_map);
            var grid = g_Control.CreateControl{ALittle.DisplayObject}("ide_tile_hex_h_grid");
            grid.width = side_len * 2;
            grid.height = side_len * 1.732;
            cell.AddChild(grid);
            return cell;
        }

        return null;
    }

    // 创建image
    private fun CreateImage() : ALittle.DisplayObject
    {
        var tile_type = this._user_info.tile_map.tile_type;
    	var side_len = this._user_info.tile_map.side_len;

        if (tile_type == ALittle.TileType.SQUARE)
        {
            var cell = new ALittle.DisplayLayout(g_Control);
            cell.width = ALittle.Tile_CalcCellWidth(this._user_info.tile_map);
            var grid = new ALittle.Image(g_Control);
            cell._user_data = grid;
            grid.width = this._user_info.tile_map.tile_width;
            grid.height = this._user_info.tile_map.tile_height;
            grid.x = this._user_info.tile_map.tile_x;
            grid.y = this._user_info.tile_map.tile_y;
            cell.AddChild(grid);
            return cell;
        }

        if (tile_type == ALittle.TileType.HEX_V)
        {
            var cell = new ALittle.DisplayLayout(g_Control);
            cell.width = ALittle.Tile_CalcCellWidth(this._user_info.tile_map);
            var grid = new ALittle.Image(g_Control);
            cell._user_data = grid;
            grid.width = this._user_info.tile_map.tile_width;
            grid.height = this._user_info.tile_map.tile_height;
            grid.x = this._user_info.tile_map.tile_x;
            grid.y = this._user_info.tile_map.tile_y;
            cell.AddChild(grid);
            return cell;
        }

        if (tile_type == ALittle.TileType.HEX_H)
        {
            var cell = new ALittle.DisplayLayout(g_Control);
            cell.width = ALittle.Tile_CalcCellWidth(this._user_info.tile_map);
            var grid = new ALittle.Image(g_Control);
            cell._user_data = grid;
            grid.width = this._user_info.tile_map.tile_width;
            grid.height = this._user_info.tile_map.tile_height;
            grid.x = this._user_info.tile_map.tile_x;
            grid.y = this._user_info.tile_map.tile_y;
            cell.AddChild(grid);
            return cell;
        }

        return null;
    }
}
