
namespace ALittleIDE;

public class IDEUITreeItem : IDEUITreeLogic
{
	private ALittle.DisplayObject _text_icon;
	private ALittle.DisplayObject _image_icon;
	private ALittle.DisplayObject _check_icon;
	private ALittle.DisplayObject _button_icon;
	private ALittle.DisplayObject _radio_icon;
	private ALittle.DisplayObject _quad_icon;
	private ALittle.DisplayObject _dropdown_icon;
	private ALittle.DisplayObject _input_icon;

	public ctor(ALittle.ControlSystem ctrl_sys, IDEUITreeUserInfo user_info, IDEUITabChild tab_child)
	{
		if (this._user_info.extends)
			this._item = ctrl_sys.CreateControl{ALittle.DisplayObject}("tree_item_disabled", this);
		else
			this._item = ctrl_sys.CreateControl{ALittle.DisplayObject}("tree_item", this);
		this.AddChild(this._item);
		this.width = this._item.width;
		this.height = this._item.height;

		this._text_icon.visible = false;
		this._image_icon.visible = false;
		this._check_icon.visible = false;
		this._button_icon.visible = false;
		this._radio_icon.visible = false;
		this._quad_icon.visible = false;
		this._dropdown_icon.visible = false;
		this._input_icon.visible = false;

		var name_map = new Map<string, ALittle.DisplayObject>();
		name_map["Text"] = this._text_icon;
		name_map["TextArea"] = this._text_icon;
		name_map["RichArea"] = this._text_icon;
		name_map["TextInput"] = this._input_icon;
		name_map["TextEdit"] = this._input_icon;
		name_map["ImageInput"] = this._input_icon;
		name_map["ImageEdit"] = this._input_icon;
		name_map["RichEdit"] = this._input_icon;
		name_map["RichInput"] = this._input_icon;
		
		name_map["Quad"] = this._quad_icon;

		name_map["Image"] = this._image_icon;
		name_map["Grid9Image"] = this._image_icon;
		name_map["Sprite"] = this._image_icon;
		name_map["ImagePlay"] = this._image_icon;
		name_map["SpritePlay"] = this._image_icon;
		name_map["FramePlay"] = this._image_icon;
		name_map["Piechart"] = this._image_icon;
		name_map["Triangle"] = this._image_icon;
		
		name_map["TextButton"] = this._button_icon;
		name_map["ScrollButton"] = this._button_icon;
		name_map["SpringTextButton"] = this._button_icon;
		name_map["Slider"] = this._button_icon;

		name_map["TextCheckButton"] = this._check_icon;
		name_map["TextRadioButton"] = this._radio_icon;
		name_map["DropDown"] = this._dropdown_icon;

		var icon = name_map[this._user_info.default.__class];
		if (icon != null) icon.visible = true;

		this._extends_icon.visible = this._user_info.extends_root;

		// this._item_button.drag_trans_target = this._tab_child.tree_screen
		this._item_button.selected = false;
		this._item_button.group = this._tab_child.group;
		this._item_button.AddEventListener(this, this.HandleClick);
		this._item_button.AddEventListener(this, this.HandleDragBegin);
		this._item_button.AddEventListener(this, this.HandleDrag);
		this._item_button.AddEventListener(this, this.HandleDragEnd);
		this._item_button.AddEventListener(g_IDECenter.center.control_tree, g_IDECenter.center.control_tree.HandleControlTreeItemRightClick);
		this._item_button._user_data = this;
	}
	
	// 更新描述
	public fun UpdateDesc()
	{
		var title = "";
		if (this._user_info.child_type != null && this._user_info.child_type != "child")
			title = title.."["..this._user_info.child_type.."]";
		
		var link = this._user_info.base.__link;
		if (link == null) link = this._user_info.default.__link;

		if (link != null)
			title = title..link;
		elseif (this._user_info.base.description != null)
			title = title..this._user_info.base.description;
		elseif (this._user_info.default.description != null)
			title = title..this._user_info.default.description;
		elseif (this._user_info.base.text != null)
			title = title..this._user_info.base.text;
		elseif (this._user_info.default.text != null)
			title = title..this._user_info.default.text;

		this._item_button.text = title;
	
		if (this._user_info.child_type == null)
			this._tab_child.UpdateTitle();
	}
	
	public get is_tree() : bool { return false; }
	public get fold() : bool { return false; }
	public set fold(bool value) { }
	public fun GetDataListForAdd() : List<string> { return new List<string>(); }

	public fun CalcInfo() : ALittle.DisplayInfo
	{
		// 复制基本信息
		return ALittle.String_CopyTable(this._user_info.base);
	}
	
	// 搜索link
	public fun SearchLink(string name, [Nullable] List<IDEUITreeLogic> list) : List<IDEUITreeLogic>
	{
		if (list == null) list = new List<IDEUITreeLogic>();
	
		var link = this._user_info.base.__link;
		if (link == null) link = this._user_info.default.__link;
		if (link != null)
		{
			if (ALittle.String_Find(link, name) != null)
			{
				ALittle.List_Push(list, this);
				return list;
			}
		}
		return list;
	}
	
	// 搜索event
	public fun SearchEvent(string name, [Nullable] List<IDEUITreeLogic> list) : List<IDEUITreeLogic>
	{
		if (list == null) list = new List<IDEUITreeLogic>();
	
		var event = this._user_info.base.__event;
		if (event == null) event = this._user_info.default.__event;
		if (event != null)
		{
			for (var k, v in event)
			{
				if (ALittle.String_Find(v.func, name) != null)
				{
					ALittle.List_Push(list, this);
					return list;
				}
			}
		}
		return list;
	}
	
	// 搜索description
	public fun SearchDescription(string name, [Nullable] List<IDEUITreeLogic> list) : List<IDEUITreeLogic>
	{
		if (list == null) list = new List<IDEUITreeLogic>();
	
		var description = this._user_info.base.description;
		if (description == null) description = this._user_info.default.description;
		if (description != null)
		{
			if (ALittle.String_Find(description, name) != null)
			{
				ALittle.List_Push(list, this);
				return list;
			}
		}
		return list;
	}
	
	// 搜索target_class
	public fun SearchTargetClass(string name, [Nullable] List<IDEUITreeLogic> list) : List<IDEUITreeLogic>
	{
		if (list == null) list = new List<IDEUITreeLogic>();
	
		var target_class = this._user_info.base.__target_class;
		if (target_class == null) target_class = this._user_info.default.__target_class;
		if (target_class != null)
		{
			var target_class_str = ALittle.String_Join(target_class, ".");
			if (ALittle.String_Find(target_class_str, name) != null)
			{
				ALittle.List_Push(list, this);
				return list;
			}
		}
		return list;
	}
	
	// 搜索texture_name
	public fun SearchTextureName(string name, [Nullable] List<IDEUITreeLogic> list) : List<IDEUITreeLogic>
	{
		if (list == null) list = new List<IDEUITreeLogic>();
	
		var texture_name = this._user_info.base.texture_name;
		if (texture_name == null) texture_name = this._user_info.default.texture_name;
		if (texture_name != null)
		{
			if (ALittle.String_Find(texture_name, name) != null)
			{
				ALittle.List_Push(list, this);
				return list;
			}
		}
		return list;
	}
	
	// 编辑区拾取
	public fun EditPickUp(double x, double y) : IDEUITreeLogic
	{
		// 如果是继承的是不可以选中的
		if (this._user_info.extends) return null;
		
		// 检查自己是否被选中
		var object = this._user_info.object;
		var pick_this, rel_x, rel_y = object.PickUpSelf(x, y);
	
		if (pick_this != null) return this;
		return null;
	}
	
	// 编辑区拾取列表，深度拾取，会产生一个列表，只拾取容器
	public fun QuickPickUp(double x, double y, List<IDEUITreeLogic> list)
	{
	}
	
	// 控件树区拾取
	public fun SelectPickUp(double x, double y) : IDEUITreeLogic, IDEUITreeLogic
	{
		if (this._user_info.extends) return null, null;
	
		var pick_this, rel_x, rel_y = this._item_button.PickUpSelf(x, y);
	
		if (pick_this != null) return null, this;
		return null, null;
	}

    public fun GenerateClassMember(List<string> list)
    {
        var link = this._user_info.base.__link;
        if (link == null) link = this._user_info.default.__link;
        if (link == null) return;


        var member = "\tprivate ";
        if (this._user_info.base.__target_class != null)
            member = member..ALittle.String_Join(this._user_info.base.__target_class, ".");
        elseif (this._user_info.default.__target_class != null)
        	member = member..ALittle.String_Join(this._user_info.default.__target_class, ".");
        elseif (this._user_info.base.__class != null)
        	member = member.."ALittle."..this._user_info.base.__class;
        else
        	member = member.."ALittle."..this._user_info.default.__class;

        member = member.." "..link..";";

        var desc = this._user_info.base.description;
        if (desc == null || desc == "")
        	desc = this._user_info.default.description;
        if (desc != null && desc != "")
        	member = member.." // "..desc;

        member = member.."\n";
        ALittle.List_Push(list, member);
    }
}