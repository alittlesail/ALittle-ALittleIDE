
namespace ALittleIDE;

public class IDEUITree : IDEUITreeLogic
{
	private ALittle.Linear _body;
	private ALittle.DisplayObject _item_checkbutton;

	public ctor(ALittle.ControlSystem ctrl_sys, IDEUITreeUserInfo user_info, IDEUITabChild tab_child)
	{
		// 对树的头部进行处理
		if (this._user_info.extends)
			this._head = ctrl_sys.CreateControl{ALittle.DisplayObject}("tree_head_disabled", this);
		else
			this._head = ctrl_sys.CreateControl{ALittle.DisplayObject}("tree_head", this);
		ALittle.DisplayGroup.AddChild(this, this._head);
		
		this._extends_icon.visible = this._user_info.extends_root;
	
		// this._item_button.drag_trans_target = this._tab_child.tree_screen
		this._item_button.selected = false;
		this._item_button.group = this._tab_child.group;
		this._item_button.AddEventListener(this, this.HandleLButtonDown);
		this._item_button.AddEventListener(this, this.HandleClick);
		this._item_button.AddEventListener(this, this.HandleDragBegin);
		this._item_button.AddEventListener(this, this.HandleDrag);
		this._item_button.AddEventListener(this, this.HandleDragEnd);
		this._item_button.AddEventListener(g_IDECenter.center.control_tree, g_IDECenter.center.control_tree.HandleControlTreeItemRightClick);
		this._item_button._user_data = this;
	
		// 对数的身体部分进行处理
		this._body = new ALittle.Linear(ctrl_sys);
		this._body.type = ALittle.UIEnumTypes.TYPE_V;
		this._body.x = 8;
		this._body.y = this._head.height;
		this._body.width = this._head.width;
		this._item_checkbutton.selected = true;
		ALittle.DisplayGroup.AddChild(this, this._body);
		this._body.AddEventListener(this, this.HandleChildResize);
	
		// 设置一下拾取属性
		this._pickup_rect = false;
		this._pickup_child = true;
	
		this.fold = false;
	}
	

	// 更新描述
	public fun UpdateDesc()
	{
		var title = "";
		
		if (this._user_info.child_type != null && this._user_info.child_type != "child")
			title = title.."["..this._user_info.child_type.."]";
		
		title = title.."["..this._user_info.default.__class.."]";

		var link = this._user_info.base.__link;
		if (link == null) link = this._user_info.default.__link;

		if (this._user_info.base.description != null)
			title = title..this._user_info.base.description;
		elseif (this._user_info.default.description != null)
			title = title..this._user_info.default.description;
		elseif (link != null)
			title = title..link;
		elseif (this._user_info.base.text != null)
			title = title..this._user_info.base.text;
		elseif (this._user_info.default.text != null)
			title = title..this._user_info.default.text;
		elseif (this._user_info.base.texture_name != null)
			title = title..ALittle.File_GetFileNameByPath(this._user_info.base.texture_name);
		elseif (this._user_info.default.texture_name != null)
			title = title..ALittle.File_GetFileNameByPath(this._user_info.default.texture_name);

		this._item_button.text = title;
	
		if (this._user_info.child_type == null)
			this._tab_child.UpdateTitle();
	}
	
	public fun HandleLButtonDown(ALittle.UILButtonDownEvent event)
	{
		if (event.count == 1) return;
		this.fold = !this.fold;
	}
	
	public get is_tree() : bool { return true; }
	
	// 添加子控件是返回的子控件类型列表
	public fun GetDataListForAdd() : List<string>
	{
		var data_list = new List<string>();
		var data_list_count = 0;
		var clazz = this._user_info.default.__class;
		if (g_IDEEnum.can_add_child_map[clazz])
		{
			var can_add = true;
			for (var index, child:IDEUITreeLogic in this._body.childs)
			{
				if (child.user_info.child_type == "child" && child.user_info.extends)
				{
					can_add = false;
					break;
				}
			}
			if (can_add)
			{
				++ data_list_count;
				data_list[data_list_count] = "child";
			}
		}
		var show_list = g_IDEEnum.child_show_map[clazz];
		var show_list_count = 0;
		if (show_list != null)
		{
			for (var k, v in show_list)
			{
				// 如果show存在，并且是继承的，那么就不能修改
				var can_add = true;
				for (var index, child:IDEUITreeLogic in this._body.childs)
				{
					if (child.user_info.child_type == v && child.user_info.extends)
					{
						can_add = false;
						break;
					}
				}
				if (can_add)
				{
					++ data_list_count;
					data_list[data_list_count] = v;
				}
			}
		}
		return data_list;
	}
	// 是否允许添加child
	public fun CanAddChild() : bool
	{
		var clazz = this._user_info.default.__class;
		if (g_IDEEnum.can_add_child_map[clazz])
		{
			var can_add = true;
			for (var index, child:IDEUITreeLogic in this._body.childs)
			{
				if (child.user_info.child_type == "child" && child.user_info.extends)
				{
					can_add = false;
					break;
				}
			}
			if (can_add)
				return true;
		}
		return false;
	}
	
	public fun CalcInfo() : ALittle.DisplayInfo
	{
		// 复制基本信息
		var info = ALittle.String_CopyTable(this._user_info.base);
		// 清空子控件
		info.__childs = null;
		var child_count = 0;
		// 遍历子控件
		for (var k, v:IDEUITreeLogic in this._body.childs)
		{
			// 获取当前子控件的类型
			var child_type:string = null;
			// extends用来表示当前是否是继承来的，如果是则不处理
			if (v._user_info.extends == false) child_type = v._user_info.child_type;
			// 如果是子控件
			if (child_type == "child")
			{
				if (info.__childs == null) info.__childs = new List<ALittle.DisplayInfo>();
				++ child_count;
				// 插入到当前子控件列表中
				info.__childs[child_count] = v.CalcInfo();
			}
			// 如果是show
			elseif (child_type != null)
			{
				// 保存列表
				cast<Map<string, ALittle.DisplayInfo>>(info)[child_type] = v.CalcInfo();
			}
		}
		return info;
	}

    public fun GenerateClassMember(List<string> list)
    {
        var link = this._user_info.base.__link;
        if (link == null) link = this._user_info.default.__link;
        if (link != null)
        {
            var member = "\tprivate ";
            if (this._user_info.base.__target_class != null)
                member = member..ALittle.String_Join(this._user_info.base.__target_class, ".");
            elseif (this._user_info.default.__target_class != null)
                member = member..ALittle.String_Join(this._user_info.default.__target_class, ".");
            elseif (this._user_info.base.__class != null)
                member = member.."ALittle."..this._user_info.base.__class;
            else
                member = member.."ALittle."..this._user_info.default.__class;

            member = member.." "..link..";";

            var desc = this._user_info.base.description;
            if (desc == null || desc == "")
                desc = this._user_info.default.description;
            if (desc != null && desc != "")
                member = member.." // "..desc;

            member = member.."\n";
            ALittle.List_Push(list, member);
        }

        // 如果有target class，那么不用遍历子控件
        if (this._user_info.base.__target_class != null || this._user_info.default.__target_class != null) return;

		for (var k, child:IDEUITreeLogic in this._body.childs)
			child.GenerateClassMember(list);
    }
	
	// 搜索link
	public fun SearchLink(string name, [Nullable] List<IDEUITreeLogic> list) : List<IDEUITreeLogic>
	{
		if (list == null) list = new List<IDEUITreeLogic>();
	
		var link = this._user_info.base.__link;
		if (link == null) link = this._user_info.default.__link;
		if (link != null)
		{
			if (ALittle.String_Find(link, name) != null)
				ALittle.List_Push(list, this);
		}
		
		for (var k, child:IDEUITreeLogic in this._body.childs)
			child.SearchLink(name, list);
	
		return list;
	}
	
	// 搜索event
	public fun SearchEvent(string name, [Nullable] List<IDEUITreeLogic> list) : List<IDEUITreeLogic>
	{
		if (list == null) list = new List<IDEUITreeLogic>();
	
		var event = this._user_info.base.__event;
		if (event == null) event = this._user_info.default.__event;
		if (event != null)
		{
			for (var k, v in event)
			{
				if (ALittle.String_Find(v.func, name) != null)
				{
					ALittle.List_Push(list, this);
					break;
				}
			}
		}
	
		for (var k, child:IDEUITreeLogic in this._body.childs)
			child.SearchEvent(name, list);
	
		return list;
	}
	
	// 搜索description
	public fun SearchDescription(string name, [Nullable] List<IDEUITreeLogic> list) : List<IDEUITreeLogic>
	{
		if (list == null) list = new List<IDEUITreeLogic>();
	
		var description = this._user_info.base.description;
		if (description == null) description = this._user_info.default.description;
		if (description != null)
		{
			if (ALittle.String_Find(description, name) != null)
				ALittle.List_Push(list, this);
		}
		for (var k, child:IDEUITreeLogic in this._body.childs)
			child.SearchDescription(name, list);

		return list;
	}
	
	// 搜索target_class
	public fun SearchTargetClass(string name, [Nullable] List<IDEUITreeLogic> list) : List<IDEUITreeLogic>
	{
		if (list == null) list =  new List<IDEUITreeLogic>();
	
		var target_class = this._user_info.base.__target_class;
		if (target_class == null) target_class = this._user_info.default.__target_class;
		if (target_class != null)
		{
			var target_class_str = ALittle.String_Join(target_class, "");
			if (ALittle.String_Find(target_class_str, name) != null)
				ALittle.List_Push(list, this);
		}
		for (var k, child:IDEUITreeLogic in this._body.childs)
			child.SearchTargetClass(name, list);

		return list;
	}
	
	// 搜索texture_name
	public fun SearchTextureName(string name, [Nullable] List<IDEUITreeLogic> list) : List<IDEUITreeLogic>
	{
		if (list == null) list = new List<IDEUITreeLogic>();
	
		var texture_name = this._user_info.base.texture_name;
		if (texture_name == null) texture_name = this._user_info.default.texture_name;
		if (texture_name != null)
		{
			if (ALittle.String_Find(texture_name, name) != null)
				ALittle.List_Push(list, this);
		}
		for (var k, child:IDEUITreeLogic in this._body.childs)
			child.SearchTextureName(name, list);

		return list;
	}
	
	// 编辑区拾取
	public fun EditPickUp(double x, double y) : IDEUITreeLogic
	{
		// 如果是继承的是不可以选中的
		if (this._user_info.extends) return null;
	
		var object = this._user_info.object;
		var pick_this, rel_x, rel_y = object.PickUpSelf(x, y);

		var offset_x, offset_y = object.GetChildOffset();
		rel_x = rel_x - offset_x;
		rel_y = rel_y - offset_y;
		
		var child_count = this._body.child_count;
		var child_list = this._body.childs;
		for (var i = child_count; i >= 1; -1)
		{
			var child = cast<IDEUITreeLogic>(child_list[i]);
			var target = child.EditPickUp(rel_x, rel_y);
			if (target != null) return target;
		}
	
		if (pick_this != null) return this;
		return null;
	}
	
	// 编辑区拾取列表，深度拾取，会产生一个列表，只拾取容器
	public fun QuickPickUp(double x, double y, List<IDEUITreeLogic> list)
	{
		// 如果是继承的是不可以选中的
		if (this._user_info.extends) return;
	
		var object = this._user_info.object;
		var pick_this, rel_x, rel_y = object.PickUpSelf(x, y);
		if (pick_this != null) ALittle.List_Push(list, this);
	
		var child_count = this._body.child_count;
		var child_list = this._body.childs;
		for (var i = child_count; i >= 1; -1)
		{
			var child = cast<IDEUITreeLogic>(child_list[i]);
			child.QuickPickUp(rel_x, rel_y, list);
		}
	}
	
	// 控件树区拾取
	public fun SelectPickUp(double x, double y) : IDEUITreeLogic, IDEUITreeLogic
	{
		// 如果是继承的是不可以选中的
		if (this._user_info.extends) return null, null;
	
		var pick_this, rel_x, rel_y = this._item_button.PickUpSelf(x, y);
	
		// 如果隐藏的就不处理
		if (this._body.visible)
		{
			var child_count = this._body.child_count;
			var child_list = this._body.childs;
			for (var i = child_count; i >= 1; -1)
			{
				var parent, child = cast<IDEUITreeLogic>(child_list[i]).SelectPickUp(rel_x, rel_y);
				if (parent != null || child != null) return parent, child;
			}
		}
	
		if (pick_this != null) return this, null;
		return null, null;
	}
	
	public fun HandleChildResize(ALittle.UIResizeEvent event)
	{
		this.DispatchEvent(new ALittle.UIResizeEvent());
	}
	
	public fun HandleHeadChanged(ALittle.UIEvent event)
	{
		this._body.visible = event.target.selected;
		this.DispatchEvent(new ALittle.UIResizeEvent());
	}
	//////////////////////////////////////////////////////////////////////////////////////
	public fun GetChildIndex(ALittle.DisplayObject child) : int	{ return this._body.GetChildIndex(child);	}
	public fun SetChildIndex(ALittle.DisplayObject child, int index) : bool { return this._body.SetChildIndex(child, index); }
	public fun GetChildByIndex(int index) : ALittle.DisplayObject {	return this._body.GetChildByIndex(index); }
	public fun GetChildIndex(ALittle.DisplayObject child) : int	{ return this._body.GetChildIndex(child);	}
	public get childs() : List<ALittle.DisplayObject> { return this._body.childs; }
	public get child_count() : int { return this._body.child_count;	}
	public fun HasChild(ALittle.DisplayObject child) : bool { return this._body.HasChild(child); }

	public fun AddChild(ALittle.DisplayObject child, [Nullable] int index) : bool
	{
		if (this._body.AddChild(child, index) == false)
			return false;
		child._logic_parent = this;
		if (this._body.abs_visible)
			this.DispatchEvent(new ALittle.UIResizeEvent());
		return true;
	}
	
	public fun RemoveChild(ALittle.DisplayObject child) : bool
	{
		if (this._body.RemoveChild(child) == false)
			return false;
		if (this._body.abs_visible)
			this.DispatchEvent(new ALittle.UIResizeEvent());
		return true;
	}

	public fun SpliceChild(int index, [Nullable] int count) : int
	{
		var result = this._body.SpliceChild(index, count);
		if (result == 0) return 0;
		if (this._body.abs_visible)
			this.DispatchEvent(new ALittle.UIResizeEvent());
		return result;
    }
	
	public fun RemoveAllChild()
	{
		this._body.RemoveAllChild();
		if (this._body.abs_visible)
			this.DispatchEvent(new ALittle.UIResizeEvent());
	}
	
	//////////////////////////////////////////////////////////////////////
	public get width() : double
	{
		var head_width = 0.0;
		if (this._head != null) head_width = this._head.width;
		var body_width = 0.0;
		if (this._body.visible)
		{
			var start_x = this._body.x;
			body_width = start_x + this._body.width;
			var childs = this._body.childs;
			for (var k, v in childs)
			{
				var child_width = start_x + v.x + v.width;
				if (body_width < child_width) body_width = child_width;
			}
		}
		if (head_width > body_width) return head_width;
		return body_width;
	}
	
	public get height() : double
	{
		var head_height = 0.0;
		if (this._head != null) head_height = this._head.height;
		if (this._body.visible) return head_height + this._body.height;
		return head_height;
	}
	
	public get fold() : bool { return this._body.visible; }
	public set fold(bool value)
	{
		if (value == this._body.visible) return;
	
		this._body.visible = value;
		this._item_checkbutton.selected = value;
		this.DispatchEvent(new ALittle.UIResizeEvent());
	}
	
	public get max_right() : double	{ return this.width; }
	public get max_bottom() : double { return this.height; }
}
