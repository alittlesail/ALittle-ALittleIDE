
namespace ALittleIDE;

public class SpriteS : DisplayObjectS
{
    public ctor(IDEUITreeUserInfo user_info, IDEUITabChild tab_child, IDEUITreeLogic tree_logic)
    {
        this._layer_name = "ide_setting_sprite";
    }
    
    public fun LoadNatureBase()
    {
        DisplayObjectS.LoadNatureBase(this);
        this.LoadDefaultNilString("texture_name");

        this.LoadValueData("row_count");
        this.LoadValueData("col_count");
        this.LoadValueData("row_index");
        this.LoadValueData("col_index");
        this.LoadEnumData("flip", cast<Map<string, any>>(g_IDEEnum.flip_type));
    }
    //texture_name
    public fun HandleImageTextureNameFOCUSOUT(ALittle.UIEvent event)
    {
        this.DefaultNilStringInputChange("texture_name", false);
    }
    //texture_name
    public async fun HandleImageTextureNameSelect(ALittle.UIEvent event)
    {
        var ui_manager = g_IDEProject.GetUIManager(this._tree_logic.user_info.module);
        if (ui_manager == null)
        {
            g_AUITool.ShowNotice("错误", "模块不存在:"..this._tree_logic.user_info.module);
            return;
        }

		g_IDEImageSelectDialog.SetBasePath(ui_manager.texture_path);
		var path = g_IDEImageSelectDialog.ShowSelect();
		if (path == null) return;
		this.ImagePathSelectCallback("texture_name", this.HandleImageTextureNameFOCUSOUT, null, path, true);
    }
    
    public fun HandleRowCountFOCUSOUT(ALittle.UIEvent event)
    {
        this.ValueNumInputChange("row_count", false);
    }
    
    public fun HandleColCountFOCUSOUT(ALittle.UIEvent event)
    {
        this.ValueNumInputChange("col_count", false);
    }
    
    public fun HandleRowIndexFOCUSOUT(ALittle.UIEvent event)
    {
        this.ValueNumInputChange("row_index", false);
    }
    
    public fun HandleColIndexFOCUSOUT(ALittle.UIEvent event)
    {
        this.ValueNumInputChange("col_index", false);
    }
    
    public fun HandleFlipSELECT_CHANGE(ALittle.UIEvent event)
    {
        var list = g_IDEEnum.flip_rtype;
        this.TypeSelectChange("flip", cast<Map<string, any>>(list), false);
    }
}