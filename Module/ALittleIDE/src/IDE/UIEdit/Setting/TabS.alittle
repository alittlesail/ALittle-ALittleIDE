
namespace ALittleIDE;

public class TabS : DisplayLayoutS
{
	private ALittle.DisplayObject _show_head_background;

	public ctor(IDEUITreeUserInfo user_info, IDEUITabChild tab_child, IDEUITreeLogic tree_logic)
	{
		this._layer_name = "ide_setting_tab";
	}
	
	public fun LoadNatureBase()
	{
		DisplayLayoutS.LoadNatureBase(this);
	
		this.LoadDefaultNilString("radiobutton_style");
		this.LoadDefaultNilString("closebutton_style");
		this.LoadDefaultNilString("text_style");
		this.LoadDefaultNilString("selected_closebutton_style");
		this.LoadDefaultNilString("selected_text_style");
		
		this.LoadShowTypeDataForImage("show_head_background");

		this.LoadValueData("button_gap");
		this.LoadValueData("button_start");
		this.LoadValueData("button_margin");
		this.LoadValueData("head_size");
		this.LoadValueData("tab_index");
		this.LoadValueData("view_margin");
		this.LoadValueData("child_width_margin");
	}
	
	public fun HandleRBSttyleFOCUSOUT(ALittle.UIEvent event)
	{
		this.DefaultNilStringInputChange("radiobutton_style", false);
	}
	
	public fun HandleCBStyleFOCUSOUT(ALittle.UIEvent event)
	{
		this.DefaultNilStringInputChange("closebutton_style", false);
	}
	
	public fun HandleTStyleFOCUSOUT(ALittle.UIEvent event)
	{
		this.DefaultNilStringInputChange("text_style", false);
	}
	
	public fun HandleSCBStyleFOCUSOUT(ALittle.UIEvent event)
	{
		this.DefaultNilStringInputChange("selected_closebutton_style", false);
	}
	
	public fun HandleSTStyleFOCUSOUT(ALittle.UIEvent event)
	{
		this.DefaultNilStringInputChange("selected_text_style", false);
	}
	
	public fun HandleShowHeadBFOCUSOUT(ALittle.UIEvent event)
	{
		if (event.target._user_data != null)
		{
			if (event.target._user_data == event.target.text) return;
			event.target._user_data = event.target.text;
		}
		this.RemoverToNilShowSetForImage("show_head_background", this._show_head_background.text, this._show_head_background.selected, false);
	}
	public async fun HandleShowHeadBSelect(ALittle.UIEvent event)
	{
        var ui_manager = g_IDEProject.GetUIManager(this._tree_logic.user_info.module);
        if (ui_manager == null)
        {
            g_AUITool.ShowNotice("错误", "模块不存在:"..this._tree_logic.user_info.module);
            return;
        }

		g_IDEImageSelectDialog.SetBasePath(ui_manager.texture_path);
		var path = g_IDEImageSelectDialog.ShowSelect();
		if (path == null) return;
		this.ImagePathSelectCallback("show_head_background", this.HandleShowHeadBFOCUSOUT, null, path, false);
	}
	
	public fun HandleBGapFOCUSOUT(ALittle.UIEvent event)
	{
		this.ValueNumInputChange("button_gap", false);
	}
	
	public fun HandleBStartFOCUSOUT(ALittle.UIEvent event)
	{
		this.ValueNumInputChange("button_start", false);
	}
	
	public fun HandleBMarginFOCUSOUT(ALittle.UIEvent event)
	{
		this.ValueNumInputChange("button_margin", false);
	}
	
	public fun HandleHeadSizeFOCUSOUT(ALittle.UIEvent event)
	{
		this.ValueNumInputChange("head_size", false);
	}
	
	public fun HandleTabIndexFOCUSOUT(ALittle.UIEvent event)
	{
		this.ValueNumZInputChange("tab_index", false);
	}
	
	public fun HandleViewMarginFOCUSOUT(ALittle.UIEvent event)
	{
		this.ValueNumInputChange("view_margin", false);
	}
	
	public fun HandleChildWidthMarginFOCUSOUT(ALittle.UIEvent event)
	{
		this.ValueNumInputChange("child_width_margin", false);
	}
}