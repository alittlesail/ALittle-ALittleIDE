
namespace ALittleIDE;

public class ScrollListS : DisplayLayoutS
{
	private ALittle.DisplayObject _right_scrollbar;

	public ctor(IDEUITreeUserInfo user_info, IDEUITabChild tab_child, IDEUITreeLogic tree_logic)
	{
		this._layer_name = "ide_setting_scrolllist";
	}
	
	public fun LoadNatureBase()
	{
		DisplayLayoutS.LoadNatureBase(this);
	
		var list = g_IDEEnum.hv_type;
		this.LoadTypeSelectData("type", list);
		this.LoadShowTypeDataForExtends("right_scrollbar");
		this.LoadValueData("gap");
		this.LoadBoolData("clip_atonce", false, g_IDEEnum.yn_type);
		this.LoadBoolData("open_extends_drag", true, g_IDEEnum.yn_type);
	}
	
	public fun HandleRightSFOCUSOUT(ALittle.UIEvent event)
	{
		if (event.target._user_data != null)
		{
			if (event.target._user_data == event.target.text) return;
			event.target._user_data = event.target.text;
		}
		this.RemoverToNilShowSetForExtends("right_scrollbar", this._right_scrollbar.text, false);
	}
	
	public fun HandleScrollListTypeSELECT_CHANGE(ALittle.UIEvent event)
	{
		var list = g_IDEEnum.hv_rtype;
		this.TypeSelectChange("type", cast<Map<string, any>>(list), true);
	}
	
	public fun HandleGapFOCUSOUT(ALittle.UIEvent event)
	{
		this.ValueNumInputChange("gap", false);
	}
	
	public fun HandleClipClick(ALittle.UIEvent event)
	{
		cast<ALittle.ScrollList>(this._object).AdjustScrollBar();
		cast<ALittle.ScrollList>(this._object).RefreshClipDisLine();
	}
	
	public fun HandleClipAtonceSELECT_CHANGE(ALittle.UIEvent event)
	{
		this.BoolSelectChange("clip_atonce", false, g_IDEEnum.yn_type);
	}
	public fun HandleHandOpenExtendsDragSELECT_CHANGE(ALittle.UIEvent event)
	{
		this.BoolSelectChange("open_extends_drag", false, g_IDEEnum.yn_type);
	}
}