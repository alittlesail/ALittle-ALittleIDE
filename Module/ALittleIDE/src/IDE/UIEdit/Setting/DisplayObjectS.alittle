
namespace ALittleIDE;

public class DisplayObjectS
{
	private string _layer_name;
	private ALittle.DisplayInfo _base;
	private ALittle.DisplayInfo _default;
	private ALittle.DisplayObject _object;
	private IDEUITabChild _tab_child;
	private IDEUITreeLogic _tree_logic;

	private ALittle.DisplayLayout _layer;

	private ALittle.DisplayObject _x_type;
	private ALittle.ImageInput _x_value;
	private ALittle.DisplayObject _y_type;
	private ALittle.ImageInput _y_value;
	private ALittle.DisplayObject _width_type;
	private ALittle.ImageInput _width_value;
	private ALittle.DisplayObject _height_type;
	private ALittle.ImageInput _height_value;
	
	private ALittle.ImageInput _red;
	private ALittle.ImageInput _green;
	private ALittle.ImageInput _blue;
	private ALittle.ImageInput _alpha;
	
	private ALittle.DisplayObject _scale_x;
	private ALittle.DisplayObject _scale_y;
	private ALittle.DisplayObject _center_x;
	private ALittle.DisplayObject _center_y;
	private ALittle.DisplayObject _angle;

	private ALittle.TextCheckButton _hand_cursor;
    private ALittle.Text _hand_cursor_check_text;
	private ALittle.TextCheckButton _visible;
    private ALittle.Text _visible_check_text;
	private ALittle.TextCheckButton _disabled;
    private ALittle.Text _disabled_check_text;
	
	private ALittle.ImageInput _description;
	private ALittle.ImageInput ___target_class;
	private ALittle.ImageInput ___link;
	private ALittle.ImageInput _id;
	private ALittle.ImageInput ___event;
    
	public ctor(IDEUITreeUserInfo user_info, IDEUITabChild tab_child, IDEUITreeLogic tree_logic)
	{
		// 设置面板的UI
		this._layer_name = "ide_setting_displayobject";
		// 保存信息
		this._base = user_info.base;
		this._default = user_info.default;
		this._object = user_info.object;
		this._tab_child = tab_child;
		this._tree_logic = tree_logic;
	}

	public get base() : ALittle.DisplayInfo
	{
		return this._base;
	}

	public get default() : ALittle.DisplayInfo
	{
		return this._default;
	}

	public get x_value() : ALittle.ImageInput
	{
		return this._x_value;
	}

	public get y_value() : ALittle.ImageInput
	{
		return this._y_value;
	}

	public get width_value() : ALittle.ImageInput
	{
		return this._width_value;
	}

	public get height_value() : ALittle.ImageInput
	{
		return this._height_value;
	}
	
	public get title() : string
	{
		return this._default.__class;
	}
	
	public get layer() : ALittle.DisplayLayout
	{
		if (this._layer == null)
		{
			// 创建控件
			this._layer = g_Control.CreateControl{ALittle.DisplayLayout}(this._layer_name, this);
			// 初始化基本信息
			this.LoadNatureBase();
		}
		return this._layer;
	}
	
	// 初次创建的面板读取基础属性
	public fun LoadNatureBase()
	{
		////////////////////////////////////////////////////////////////////////////////////////////-
		this.LoadEnumData("x_type", cast<Map<string, any>>(g_IDEEnum.xy_type));
		if (this._default.x == 0)
		{
			if (this._base.x != null)
				this._x_value.text =  this._base.x;
			elseif (this._base.x_value != null)
				this._x_value.text = this._base.x_value;
			elseif (this._default.x_value != null)
				this._x_value.text = this._default.x_value;
		}
		elseif (this._default.x_value == 0)
		{
			if (this._base.x != null)
				this._x_value.text =  this._base.x;
			elseif (this._base.x_value != null)
				this._x_value.text = this._base.x_value;
			elseif (this._default.x != null)
				this._x_value.text = this._default.x;
		}
		elseif (this._default.x != 0 && this._default.x_value != 0)
		{
			ALittle.Log("x value error");
		}
		////////////////////////////////////////////////////////////////////////////////////////////-
		this.LoadEnumData("y_type", cast<Map<string, any>>(g_IDEEnum.xy_type));
		if (this._default.y == 0)
		{
			if (this._base.y != null)
				this._y_value.text =  this._base.y;
			elseif (this._base.y_value != null)
				this._y_value.text = this._base.y_value;
			elseif (this._default.y_value != null)
				this._y_value.text = this._default.y_value;
		}
		elseif (this._default.y_value == 0)
		{
			if (this._base.y != null)
				this._y_value.text =  this._base.y;
			elseif (this._base.y_value != null)
				this._y_value.text = this._base.y_value;
			elseif (this._default.y != null)
				this._y_value.text = this._default.y;
		}
		elseif (this._default.y != 0 && this._default.y_value != 0)
		{
			ALittle.Log("y value error");
		}
		////////////////////////////////////////////////////////////////////////////////////////////-
		this.LoadEnumData("width_type", cast<Map<string, any>>(g_IDEEnum.wh_type));
		if (this._default.width == 0)
		{
			if (this._base.width != null)
				this._width_value.text =  this._base.width;
			elseif (this._base.width_value != null)
				this._width_value.text = this._base.width_value;
			elseif (this._default.width_value != null)
				this._width_value.text = this._default.width_value;
		}
		elseif (this._default.width_value == 0)
		{
			if (this._base.width != null)
				this._width_value.text =  this._base.width;
			elseif (this._base.width_value != null)
				this._width_value.text = this._base.width_value;
			elseif (this._default.width != null)
				this._width_value.text = this._default.width;
		}
		elseif (this._default.width != 0 && this._default.width_value != 0)
		{
			ALittle.Log("width value error");
		}
		////////////////////////////////////////////////////////////////////////////////////////////-
		this.LoadEnumData("height_type", cast<Map<string, any>>(g_IDEEnum.wh_type));
		if (this._default.height == 0)
		{
			if (this._base.height != null)
				this._height_value.text =  this._base.height;
			elseif (this._base.height_value != null)
				this._height_value.text = this._base.height_value;
			elseif (this._default.height_value != null)
				this._height_value.text = this._default.height_value;
		}
		elseif (this._default.height_value == 0)
		{
			if (this._base.height != null)
				this._height_value.text =  this._base.height;
			elseif (this._base.height_value != null)
				this._height_value.text = this._base.height_value;
			elseif (this._default.height != null)
				this._height_value.text = this._default.height;
		}
		elseif (this._default.height != 0 && this._default.height_value != 0)
		{
			ALittle.Log("height value error");
		}
		////////////////////////////////////////////////////////////////////////////////////////////-
		this.LoadColorData("red");
		this.LoadColorData("green");
		this.LoadColorData("blue");
		this.LoadColorData("alpha");
		////////////////////////////////////////////////////////////////////////////////////////////-
		this.LoadValueData("scale_x");
		this.LoadValueData("scale_y");
		////////////////////////////////////////////////////////////////////////////////////////////-
		this.LoadValueData("center_x");
		this.LoadValueData("center_y");
		this.LoadValueData("angle");
		////////////////////////////////////////////////////////////////////////////////////////////-
		this.LoadCheckBoolData("hand_cursor", false);
		this.LoadCheckBoolData("visible", true);
		this.LoadCheckBoolData("disabled", true);
        this._hand_cursor_check_text.event_trans_target = this._hand_cursor;
        this._visible_check_text.event_trans_target = this._visible;
        this._disabled_check_text.event_trans_target = this._disabled;
		////////////////////////////////////////////////////////////////////////////////////////////-
		this.LoadDefaultNilString("__link");
		////////////////////////////////////////////////////////////////////////////////////////////-
		this.LoadShowTypeData("__event");
		////////////////////////////////////////////////////////////////////////////////////////////-
		this.LoadShowTypeDataForTargetClass("__target_class");
		////////////////////////////////////////////////////////////////////////////////////////////-
		this.LoadDefaultNilString("description");
		////////////////////////////////////////////////////////////////////////////////////////////-
	}
	//通用失去焦点事件
	public fun HandleCommonInputFOCUSIN(ALittle.UIEvent event)
	{
		event.target._user_data = event.target.text;
	}
	//设置x_type
	public fun SetXType(int x_type, [Nullable] ALittle.RevokeBind revoke_bind)
	{
		if (x_type == null) return;
		this._x_type.text = g_IDEEnum.xy_type[x_type];
		var list = g_IDEEnum.xy_rtype;
		this.TypeSelectChange("x_type", cast<Map<string, any>>(list), true, revoke_bind);
	}
	//x_type
	public fun HandleXTypeSELECT_CHANGE(ALittle.UIEvent event)
	{
		var object = this._object;
		var target_x = object.x;
		var new_x = target_x;
	
		var list = g_IDEEnum.xy_rtype;
		var revoke_bind = new ALittle.RevokeBind();
		this.TypeSelectChange("x_type", cast<Map<string, any>>(list), true, revoke_bind);
	
		// 设置新的X值
		if (object.x_type == ALittle.UIEnumTypes.POS_ABS)
			new_x = target_x;
		elseif (object.x_type == ALittle.UIEnumTypes.POS_ALIGN_STARTING)
			new_x = target_x;
		elseif (object.x_type == ALittle.UIEnumTypes.POS_ALIGN_CENTER)
			new_x = target_x - (object.show_parent.width - object.width) / 2;
		elseif (object.x_type == ALittle.UIEnumTypes.POS_ALIGN_ENDING)
			new_x = object.show_parent.width - object.width - target_x;
		elseif (object.x_type == ALittle.UIEnumTypes.POS_PERCENT_STARTING)
			if (object.show_parent.width == 0) new_x = 0;
			else new_x = target_x / object.show_parent.width;
		elseif (object.x_type == ALittle.UIEnumTypes.POS_PERCENT_CENTER)
			if (object.show_parent.width == 0) new_x = 0;
			else new_x = (target_x - (object.show_parent.width - object.width) / 2) / object.show_parent.width;
		elseif (object.x_type == ALittle.UIEnumTypes.POS_PERCENT_ENDING)
			if (object.show_parent.width - object.width == 0) new_x = 0;
			else new_x = 1 - target_x / (object.show_parent.width - object.width);
	
		this.SetXValue(new_x, revoke_bind);
		this._tab_child.revoke_list.PushRevoke(revoke_bind);
	}
	//设置y_type
	public fun SetYType(int y_type, [Nullable] ALittle.RevokeBind revoke_bind)
	{
		if (y_type == null) return;
		this._y_type.text = g_IDEEnum.xy_type[y_type];
		var list = g_IDEEnum.xy_rtype;
		this.TypeSelectChange("y_type", cast<Map<string, any>>(list), true, revoke_bind);
	}
	//y_type
	public fun HandleYTypeSELECT_CHANGE(ALittle.UIEvent event)
	{
		var object = this._object;
		var target_y = object.y;
		var new_y = target_y;
	
		var list = g_IDEEnum.xy_rtype;
		var revoke_bind = new ALittle.RevokeBind();
		this.TypeSelectChange("y_type", cast<Map<string, any>>(list), true, revoke_bind);
	
		// 设置新的y值
		if (object.y_type == ALittle.UIEnumTypes.POS_ABS)
			new_y = target_y;
		elseif (object.y_type == ALittle.UIEnumTypes.POS_ALIGN_STARTING)
			new_y = target_y;
		elseif (object.y_type == ALittle.UIEnumTypes.POS_ALIGN_CENTER)
			new_y = target_y - (object.show_parent.height - object.height) / 2;
		elseif (object.y_type == ALittle.UIEnumTypes.POS_ALIGN_ENDING)
			new_y = object.show_parent.height - object.height - target_y;
		elseif (object.y_type == ALittle.UIEnumTypes.POS_PERCENT_STARTING)
			if (object.show_parent.height == 0) new_y = 0;
			else new_y = target_y / object.show_parent.height;
		elseif (object.y_type == ALittle.UIEnumTypes.POS_PERCENT_CENTER)
			if (object.show_parent.height == 0) new_y = 0;
			else new_y = (target_y - (object.show_parent.height - object.height) / 2) / object.show_parent.height;
		elseif (object.y_type == ALittle.UIEnumTypes.POS_PERCENT_ENDING)
			if (object.show_parent.height - object.height == 0) new_y = 0;
			else new_y = 1 - target_y / (object.show_parent.height - object.height);
	
		this.SetYValue(new_y, revoke_bind);
		this._tab_child.revoke_list.PushRevoke(revoke_bind);
	}
	//设置width_type
	public fun SetWType(int width_type, [Nullable] ALittle.RevokeBind revoke_bind)
	{
		if (width_type == null) return;
		this._width_type.text = g_IDEEnum.wh_type[width_type];
		var list = g_IDEEnum.wh_rtype;
		this.TypeSelectChange("width_type", cast<Map<string, any>>(list), true, revoke_bind);
	}
	//width_type
	public fun HandleWTypeSELECT_CHANGE(ALittle.UIEvent event)
	{
		var list = g_IDEEnum.wh_rtype;
		this.TypeSelectChange("width_type", cast<Map<string, any>>(list), true);
	}
	//设置height_type
	public fun SetHType(int height_type, [Nullable] ALittle.RevokeBind revoke_bind)
	{
		if (height_type == null) return;
		this._height_type.text = g_IDEEnum.wh_type[height_type];
		var list = g_IDEEnum.wh_rtype;
		this.TypeSelectChange("height_type", cast<Map<string, any>>(list), true, revoke_bind);
	}
	//height_type
	public fun HandleHTypeSELECT_CHANGE(ALittle.UIEvent event)
	{
		var list = g_IDEEnum.wh_rtype;
		this.TypeSelectChange("height_type", cast<Map<string, any>>(list), true);
	}
	//设置x_value
	public fun SetXValue(double x_value, [Nullable] ALittle.RevokeBind revoke_bind)
	{
		if (x_value == null) return;
		this._x_value.text = x_value;
		this._base.x = null;
		this.ValueNumInputChange("x_value", true, revoke_bind);
	}
	//x_value
	public fun HandleXValueFOCUSOUT(ALittle.UIEvent event)
	{
		this._base.x = null;
		this.ValueNumInputChange("x_value", true);
	}
	public fun HandleXValueMoveIn(ALittle.UIEvent event) { ALittle.System_SetHDragCursor(); }
	public fun HandleXValueMoveOut(ALittle.UIEvent event) { ALittle.System_SetNormalCursor(); }
	public fun HandleXValueTabKey(ALittle.UIEvent event) { this._y_value.focus = true; this._y_value.SelectAll(); }
	public fun HandleXValueDrag(ALittle.UIButtonDragEvent event)
	{
		// 获取当前值
		var value = ALittle.Math_ToDouble(this._x_value.text);
		if (value == null) value = 0;
		value = value + event.delta_x;
		this._x_value.text = value;
		this.ValueNumInputChange("x_value", true);
	}
	//设置y_value
	public fun SetYValue(double y_value, [Nullable] ALittle.RevokeBind revoke_bind)
	{
		if (y_value == null) return;
		this._y_value.text = y_value;
		this._base.y = null;
		this.ValueNumInputChange("y_value", true, revoke_bind);
	}
	//y_value
	public fun HandleYValueFOCUSOUT(ALittle.UIEvent event)
	{
		this._base.y = null;
		this.ValueNumInputChange("y_value", true);
	}
	public fun HandleYValueMoveIn(ALittle.UIEvent event) { ALittle.System_SetHDragCursor(); }
	public fun HandleYValueMoveOut(ALittle.UIEvent event) { ALittle.System_SetNormalCursor(); }
	public fun HandleYValueTabKey(ALittle.UIEvent event) { this._width_value.focus = true; this._width_value.SelectAll(); }
	public fun HandleYValueDrag(ALittle.UIButtonDragEvent event)
	{
		// 获取当前值
		var value = ALittle.Math_ToDouble(this._y_value.text);
		if (value == null) value = 0;
		value = value + event.delta_x;
		this._y_value.text = value;
		this.ValueNumInputChange("y_value", true);
	}
	//设置width_value
	public fun SetWValue(double width_value, [Nullable] ALittle.RevokeBind revoke_bind)
	{
		if (width_value == null) return;
		this._width_value.text = width_value;
		this._base.width = null;
		this.ValueNumInputChange("width_value", true, revoke_bind);
	}
	//width_value
	public fun HandleWValueFOCUSOUT(ALittle.UIEvent event)
	{
		this._base.width = null;
		this.ValueNumInputChange("width_value", true);
	}
	public fun HandleWValueMoveIn(ALittle.UIEvent event) { ALittle.System_SetHDragCursor(); }
	public fun HandleWValueMoveOut(ALittle.UIEvent event) { ALittle.System_SetNormalCursor(); }
	public fun HandleWValueTabKey(ALittle.UIEvent event) { this._height_value.focus = true; this._height_value.SelectAll(); }
	public fun HandleWValueDrag(ALittle.UIButtonDragEvent event)
	{
		// 获取当前值
		var value = ALittle.Math_ToDouble(this._width_value.text);
		if (value == null) value = 0;
		value = value + event.delta_x;
		this._width_value.text = value;
		this.ValueNumInputChange("width_value", true);
	}
	//设置height_value
	public fun SetHValue(double height_value, [Nullable] ALittle.RevokeBind revoke_bind)
	{
		if (height_value == null) return;
		this._height_value.text = height_value;
		this._base.height = null;
		this.ValueNumInputChange("height_value", true, revoke_bind);
	}
	//height_value
	public fun HandleHValueFOCUSOUT(ALittle.UIEvent event)
	{
		this._base.height = null;
		this.ValueNumInputChange("height_value", true);
	}
	public fun HandleHValueMoveIn(ALittle.UIEvent event) { ALittle.System_SetHDragCursor(); }
	public fun HandleHValueMoveOut(ALittle.UIEvent event) { ALittle.System_SetNormalCursor(); }
	public fun HandleHValueTabKey(ALittle.UIEvent event) { this._description.focus = true; this._description.SelectAll(); }
	public fun HandleHValueDrag(ALittle.UIButtonDragEvent event)
	{
		// 获取当前值
		var value = ALittle.Math_ToDouble(this._height_value.text);
		if (value == null) value =0;
		value = value + event.delta_x;
		this._height_value.text = value;
		this.ValueNumInputChange("height_value", true);
	}
	//设置alpha
	public fun SetAlpha(double alpha, [Nullable] ALittle.RevokeBind revoke_bind)
	{
		if (alpha == null) return;
		this._alpha.text = alpha;
		this.ColorValueInputChange("alpha", false, revoke_bind);
	}
	//alpha
	public fun HandleAlphaFOCUSOUT(ALittle.UIEvent event)
	{
		this.ColorValueInputChange("alpha", false);
	}
	public fun HandleAlphaValueMoveIn(ALittle.UIEvent event) { ALittle.System_SetHDragCursor(); }
	public fun HandleAlphaValueMoveOut(ALittle.UIEvent event) { ALittle.System_SetNormalCursor(); }
	public fun HandleAlphaValueTabKey(ALittle.UIEvent event) { this._x_value.focus = true; this._x_value.SelectAll(); }
	public fun HandleAlphaValueDrag(ALittle.UIButtonDragEvent event)
	{
		// 获取当前值
		var value = ALittle.Math_ToDouble(this._alpha.text);
		if (value == null) value = 0;
		value = value + event.delta_x;
		if (value < 0) value = 0;
		elseif (value > 255) value = 255;
		this._alpha.text = value;
		this.ColorValueInputChange("alpha", true);
	}
	//设置red
	public fun SetRed(double red, [Nullable] ALittle.RevokeBind revoke_bind)
	{
		if (red == null) return;
		this._red.text = red;
		this.ColorValueInputChange("red", false, revoke_bind);
	}
	//red
	public fun HandleRedFOCUSOUT(ALittle.UIEvent event)
	{
		this.ColorValueInputChange("red", false);
	}
	public fun HandleRedValueMoveIn(ALittle.UIEvent event) { ALittle.System_SetHDragCursor(); }
	public fun HandleRedValueMoveOut(ALittle.UIEvent event) { ALittle.System_SetNormalCursor(); }
	public fun HandleRedValueTabKey(ALittle.UIEvent event) { this._green.focus = true; this._green.SelectAll(); }
	public fun HandleRedValueDrag(ALittle.UIButtonDragEvent event)
	{
		// 获取当前值
		var value = ALittle.Math_ToDouble(this._red.text);
		if (value == null) value = 0;
		value = value + event.delta_x;
		if (value < 0) value = 0;
		elseif (value > 255) value = 255;
		this._red.text = value;
		this.ColorValueInputChange("red", true);
	}
	//设置green
	public fun SetGreen(double green, [Nullable] ALittle.RevokeBind revoke_bind)
	{
		if (green == null) return;
		this._green.text = green;
		this.ColorValueInputChange("green", false, revoke_bind);
	}
	//green
	public fun HandleGreenFOCUSOUT(ALittle.UIEvent event)
	{
		this.ColorValueInputChange("green", false);
	}
	public fun HandleGreenValueMoveIn(ALittle.UIEvent event) { ALittle.System_SetHDragCursor(); }
	public fun HandleGreenValueMoveOut(ALittle.UIEvent event) { ALittle.System_SetNormalCursor(); }
	public fun HandleGreenValueTabKey(ALittle.UIEvent event) { this._blue.focus = true; this._blue.SelectAll(); }
	public fun HandleGreenValueDrag(ALittle.UIButtonDragEvent event)
	{
		// 获取当前值
		var value = ALittle.Math_ToDouble(this._green.text);
		if (value == null) value = 0;
		value = value + event.delta_x;
		if (value < 0) value = 0;
		elseif (value > 255) value = 255;
		this._green.text = value;
		this.ColorValueInputChange("green", true);
	}
	//设置blue
	public fun SetBlue(double blue, [Nullable] ALittle.RevokeBind revoke_bind)
	{
		if (blue == null) return;
		this._blue.text = blue;
		this.ColorValueInputChange("blue", false, revoke_bind);
	}
	//blue
	public fun HandleBlueFOCUSOUT(ALittle.UIEvent event)
	{
		this.ColorValueInputChange("blue", false);
	}
	public fun HandleBlueValueMoveIn(ALittle.UIEvent event) { ALittle.System_SetHDragCursor(); }
	public fun HandleBlueValueMoveOut(ALittle.UIEvent event) { ALittle.System_SetNormalCursor(); }
	public fun HandleBlueValueTabKey(ALittle.UIEvent event) { this._alpha.focus = true; this._alpha.SelectAll(); }
	public fun HandleBlueValueDrag(ALittle.UIButtonDragEvent event)
	{
		// 获取当前值
		var value = ALittle.Math_ToDouble(this._blue.text);
		if (value == null) value = 0;
		value = value + event.delta_x;
		if (value < 0) value = 0;
		elseif (value > 255) value = 255;
		this._blue.text = value;
		this.ColorValueInputChange("blue", true);
	}
	//scale_x
	public fun HandleScaleXFOCUSOUT(ALittle.UIEvent event)
	{
		this.ValueNumInputChange("scale_x", true);
	}
	//设置scale_x
	public fun SetScaleX(double scale_x, [Nullable] ALittle.RevokeBind revoke_bind)
	{
		if (scale_x == null) return;
		this._scale_x.text = scale_x;
		this.ValueNumInputChange("scale_x", true, revoke_bind);
	}
	//scale_y
	public fun HandleScaleYFOCUSOUT(ALittle.UIEvent event)
	{
		this.ValueNumInputChange("scale_y", true);
	}
	public fun SetScaleY(double scale_y, [Nullable] ALittle.RevokeBind revoke_bind)
	{
		if (scale_y == null) return;
		this._scale_y.text = scale_y;
		this.ValueNumInputChange("scale_y", true, revoke_bind);
	}
	//center_x
	public fun HandleCenterXFOCUSOUT(ALittle.UIEvent event)
	{
		this.ValueNumInputChange("center_x", true);
	}
	public fun SetCenterX(double center_x, [Nullable] ALittle.RevokeBind revoke_bind)
	{
		if (center_x == null) return;
		this._center_x.text = center_x;
		this.ValueNumInputChange("center_x", true, revoke_bind);
	}
	//center_y
	public fun HandleCenterYFOCUSOUT(ALittle.UIEvent event)
	{
		this.ValueNumInputChange("center_y", true);
	}
	public fun SetCenterY(double center_y, [Nullable] ALittle.RevokeBind revoke_bind)
	{
		if (center_y == null) return;
		this._center_y.text = center_y;
		this.ValueNumInputChange("center_y", true, revoke_bind);
	}
	// 自动获取中心锚点
	public fun HandleAutoCenter(ALittle.UIEvent event)
	{
		this._center_x.text = this._object.width / 2;
		this.ValueNumInputChange("center_x", true);
		this._center_y.text = this._object.height / 2;
		this.ValueNumInputChange("center_y", true);
	}
	//angle
	public fun HandleAngleMoveIn(ALittle.UIEvent event) { ALittle.System_SetHDragCursor(); }
	public fun HandleAngleMoveOut(ALittle.UIEvent event) { ALittle.System_SetNormalCursor(); }
	public fun HandleAngleDrag(ALittle.UIButtonDragEvent event)
	{
		// 获取当前值
		var value = ALittle.Math_ToDouble(this._angle.text);
		if (value == null) value = 0;
		value = value + event.delta_x;
		this._angle.text = value;
		this.ValueNumInputChange("angle", true);
	}
	public fun HandleAngleFOCUSOUT(ALittle.UIEvent event)
	{
		this.ValueNumInputChange("angle", true);
	}
	public fun SetAngle(double angle, [Nullable] ALittle.RevokeBind revoke_bind)
	{
		if (angle == null) return;
		this._angle.text = angle;
		this.ValueNumInputChange("angle", true, revoke_bind);
	}
	//设置hand_cursor
	public fun SetHandCursor(bool hand_cursor, [Nullable] ALittle.RevokeBind revoke_bind)
	{
		if (hand_cursor == null) return;
		this._hand_cursor.selected = hand_cursor;
		this.CheckBoolSelectChange("hand_cursor", false, revoke_bind);
	}
	//hand_cursor
	public fun HandleHandCursorChanged(ALittle.UIEvent event)
	{
		this.CheckBoolSelectChange("hand_cursor", false);
	}
	//设置visible
	public fun SetVisible(bool visible, [Nullable] ALittle.RevokeBind revoke_bind)
	{
		if (visible == null) return;
		this._visible.selected = visible;
		this.CheckBoolSelectChange("visible", false, revoke_bind);
	}
	//visible
	public fun HandleVisibleChanged(ALittle.UIEvent event)
	{
		this.CheckBoolSelectChange("visible", false);
	}
	//设置disabled
	public fun SetDisabled(bool disabled, [Nullable] ALittle.RevokeBind revoke_bind)
	{
		if (disabled == null) return;
		this._disabled.selected = disabled;
		this.CheckBoolSelectChange("disabled", false, revoke_bind);
	}
	//disabled
	public fun HandleDisabledChanged(ALittle.UIEvent event)
	{
		this.CheckBoolSelectChange("disabled", false);
	}
	//设置description
	public fun SetDescription(string description, [Nullable] ALittle.RevokeBind revoke_bind)
	{
		if (description == null) return;
		this._description.text = description;
		this.DefaultNilStringInputChange("description", false, revoke_bind);
		// 更新标题
		this._tree_logic.UpdateDesc();
	}
	//description
	public fun HandleDescriptionFOCUSOUT(ALittle.UIEvent event)
	{
		this.DefaultNilStringInputChange("description", false);
		// 更新标题
		this._tree_logic.UpdateDesc();
	}
	public fun HandleDescriptionTabKey(ALittle.UIEvent event) { this.___target_class.focus = true; this.___target_class.SelectAll(); }
	
	//以下为系统参数，不涉及对object的修改
	//设置__link
	public fun SetLink(string link, [Nullable] ALittle.RevokeBind revoke_bind)
	{
		if (link == null) return;
		this.___link.text = link;
		this.DefaultNilStringInputChange("__link", false, revoke_bind);
		// 更新标题
		this._tree_logic.UpdateDesc();
	}
	//__link
	public fun HandleLinkFOCUSOUT(ALittle.UIEvent event)
	{
		this.DefaultNilStringInputChange("__link", false);
		// 更新标题
		this._tree_logic.UpdateDesc();
	}
	public fun HandleLinkTabKey(ALittle.UIEvent event) { this._id.focus = true; this._id.SelectAll(); }
    // 找到父节点设置的插件类
    public fun GetParentTargetClass() : string
    {
        var tree = this._tree_logic;
        do
        {
            var parent = cast<IDEUITreeLogic>(tree.parent);
            if (parent == null) break;
            var target_class = parent.user_info.base.__target_class;
            if (target_class == null) target_class = parent.user_info.default.__target_class;
            if (target_class != null)
            {
                var text = ALittle.String_Join(target_class, ".");
                if (text != "") return text;
            }
            if (parent.is_root) break;
            tree = parent;
        }
        while(true);

        return null;
    }

    public async fun HandleLinkEditClick(ALittle.UIEvent event)
    {
        if (g_IDEProject.project.code == null) return;
        var pre_input = this.GetParentTargetClass();
        if (pre_input == null) return;

        var info = g_IDEProject.project.code.FindGoto(pre_input.."."..this.___link.text);
        if (info != null) g_IDECenter.center.code_list.OpenByFullPath(info.file_path, info.line_start, info.char_start, info.line_end, info.char_end);
    }
    public async fun HandleLinkChanged(ALittle.UIEvent event)
    {
        if (g_IDEProject.project.code == null) return;
        var pre_input = this.GetParentTargetClass();
        if (pre_input == null) return;
        g_AUICodeFilterScreen.ShowComplete(g_IDEProject.project.code, pre_input, this.___link);
    }
	
	//设置__event
	public fun SetEvent(List<ALittle.EventInfo> event, [Nullable] ALittle.RevokeBind revoke_bind)
	{
		if (event == null) return;
		var content = new List<string>();
		var count = 0;
		for (var index, event_info in event)
		{
			var data_type = event_info.type..":";
			var event_string = data_type..event_info.func;
			++ count;
			content[count] = event_string;
		}
		if (count == 0) return;
		this.___event.text = ALittle.String_Join(content, "\n");
		this.TableDataSet("__event", false, revoke_bind);
	}
	// __event
	public fun HandleEventFOCUSOUT(ALittle.UIEvent event)
	{
        var x, y = event.target.LocalToGlobal();
		g_IDEAttrEventDialog.ShowDialog(this, "__event", false, x + event.target.width + 10, y);
	}
	//设置__target_class
	public fun SetTargetClass(List<string> target_class, [Nullable] ALittle.RevokeBind revoke_bind)
	{
		if (target_class == null) return;
		this.___target_class.text = ALittle.String_Join(target_class, ".");
		this.TableDataSetForTargetClass("__target_class", false, revoke_bind);
	}
	// __target_class
	public fun HandleTargetClassFOCUSOUT(ALittle.UIEvent event)
	{
		this.TableDataSetForTargetClass("__target_class", false);
	}
	public fun HandleTargetClassTabKey(ALittle.UIEvent event) { this.___link.focus = true; this.___link.SelectAll(); }
	public async fun HandleTargetClassEditClick(ALittle.UIEvent event)
    {
        if (g_IDEProject.project.code == null) return;
        var info = g_IDEProject.project.code.FindGoto(this.___target_class.text);
        if (info != null) g_IDECenter.center.code_list.OpenByFullPath(info.file_path, info.line_start, info.char_start, info.line_end, info.char_end);
    }
    public async fun HandleTargetClassChanged(ALittle.UIEvent event)
    {
        if (g_IDEProject.project.code == null) return;
        g_AUICodeFilterScreen.ShowComplete(g_IDEProject.project.code, "", this.___target_class);
    }

	////////////////////////修改用函数////////////////////////////////////////////////////////////-
	//select
	//用于处理类型改变的函数
	// text 如x_type，text为需要处理的类型的名字，为string
	// list 为枚举的表
	// need_reset 是否需要调整选中框
	public fun TypeSelectChange(string text, Map<string, any> list, bool need_reset, [Nullable] ALittle.RevokeBind revoke_bind)
	{
		// 保存旧属性
		var old_base = cast<Map<string, any>>(this._base)[text];
		var old_object = cast<Map<string, any>>(this._object)[text];
		// 设置新属性
		var display_object:ALittle.DisplayObject = cast<Map<string, any>>(this)["_"..text];
		if (revoke_bind == null && cast<Map<string, any>>(this._object)[text] == list[display_object.text]) return;
		cast<Map<string, any>>(this._object)[text] = list[display_object.text];
		cast<Map<string, any>>(this._base)[text] = list[display_object.text];
		// 如果新属性跟默认属性一样，那么就把base对应的value设置成null
		if (cast<Map<string, any>>(this._base)[text] == cast<Map<string, any> >(this._default)[text])
			cast<Map<string, any>>(this._base)[text] = null;
		
		this._tab_child.UpdateHandleQuadLayout(this._tree_logic);
	
		// 设置为false
		this._tab_child.save = false;
		// 保存新的信息
		var new_base = cast<Map<string, any>>(this._base)[text];
		var new_object = cast<Map<string, any>>(this._object)[text];
		// 生成撤销类
		var old_text:string = null;
		if (display_object != null) old_text = display_object.text;
		var revoke = new IDENatureChangeRevoke(this._tree_logic, text, old_base, new_base, old_object, new_object, old_text, need_reset);
		if (revoke_bind != null) revoke_bind.PushRevoke(revoke);
		else this._tab_child.revoke_list.PushRevoke(revoke);
	}
	
	//number
	//非空非字符串数字值的改变
	public fun ValueNumInputChange(string text, bool need_reset, [Nullable] ALittle.RevokeBind revoke_bind)
	{
		// 保存旧属性
		var old_base = cast<Map<string, any>>(this._base)[text];
		var old_object = cast<Map<string, any>>(this._object)[text];
		// 设置新的属性
		var display_object:ALittle.DisplayObject = cast<Map<string, any>>(this)["_"..text];
		var value = ALittle.Math_ToDouble(display_object.text);
		if (value == null)
		{
			display_object.text = "0";
			if (revoke_bind == null && cast<Map<string, any>>(this._object)[text] == 0) return;
			cast<Map<string, any>>(this._object)[text] = 0;
			cast<Map<string, any>>(this._base)[text] = 0;
		}
		else
		{
			if (revoke_bind == null && cast<Map<string, any>>(this._object)[text] == value) return;
			cast<Map<string, any>>(this._object)[text] = value;
			cast<Map<string, any>>(this._base)[text] = value;
		}
		// 如果新属性跟默认属性一样，那么就把base对应的value设置成null
		if (cast<Map<string, any>>(this._default)[text] != null && cast<Map<string, any> >(this._base)[text] == cast<Map<string, any> >(this._default)[text])
			cast<Map<string, any>>(this._base)[text] = null;
	
		this._tab_child.UpdateHandleQuadLayout(this._tree_logic);
	
		// 设置为false
		this._tab_child.save = false;
	
		var new_base = cast<Map<string, any>>(this._base)[text];
		var new_object = cast<Map<string, any>>(this._object)[text];
		// 生成撤销类
		var old_text:string = null;
		if (display_object != null) old_text = display_object.text;
		var revoke = new IDENatureChangeRevoke(this._tree_logic, text, old_base, new_base, old_object, new_object, old_text, need_reset);
		if (revoke_bind != null) revoke_bind.PushRevoke(revoke);
		else this._tab_child.revoke_list.PushRevoke(revoke);
	}
	//>0  number
	public fun ValueNumZInputChange(string text, bool need_reset, [Nullable] ALittle.RevokeBind revoke_bind)
	{
		// 保存旧属性
		var old_base = cast<Map<string, any>>(this._base)[text];
		var old_object = cast<Map<string, any>>(this._object)[text];
		// 设置新的属性
		var display_object:ALittle.DisplayObject = cast<Map<string, any>>(this)["_"..text];
		var value = ALittle.Math_ToDouble(display_object.text);
		if (value == null || value < 0)
		{
			display_object.text = "0";
			if (revoke_bind == null && cast<Map<string, any>>(this._object)[text] == 0) return;
			cast<Map<string, any>>(this._object)[text] = 0;
			cast<Map<string, any>>(this._base)[text] = 0;
		}
		else
		{
			if (revoke_bind == null && cast<Map<string, any>>(this._object)[text] == value) return;
			cast<Map<string, any>>(this._object)[text] = value;
			cast<Map<string, any>>(this._base)[text] = value;
		}
		// 如果新属性跟默认属性一样，那么就把base对应的value设置成null
		if (cast<Map<string, any>>(this._default)[text] != null && cast<Map<string, any> >(this._base)[text] == cast<Map<string, any> >(this._default)[text])
			cast<Map<string, any>>(this._base)[text] = null;
		
		this._tab_child.UpdateHandleQuadLayout(this._tree_logic);
	
		// 设置为false
		this._tab_child.save = false;
	
		var new_base = cast<Map<string, any>>(this._base)[text];
		var new_object = cast<Map<string, any>>(this._object)[text];
		// 生成撤销类
		var old_text:string = null;
		if (display_object != null) old_text = display_object.text;
		var revoke = new IDENatureChangeRevoke(this._tree_logic, text, old_base, new_base, old_object, new_object, old_text,need_reset);
		if (revoke_bind != null) revoke_bind.PushRevoke(revoke);
		else this._tab_child.revoke_list.PushRevoke(revoke);
	}
	
	//颜色类数据改变，0-255
	public fun ColorValueInputChange(string text, bool need_reset, [Nullable] ALittle.RevokeBind revoke_bind)
	{
		// 保存旧属性
		var old_base = cast<Map<string, any>>(this._base)[text];
		var old_object = cast<Map<string, any>>(this._object)[text];
		// 设置新的属性
		var display_object:ALittle.DisplayObject = cast<Map<string, any>>(this)["_"..text];
		var value = ALittle.Math_ToDouble(display_object.text);
		if (value == null || value < 0)
		{
			display_object.text = "0";
			if (revoke_bind == null && cast<Map<string, any>>(this._object)[text] == 0) return;
			cast<Map<string, any>>(this._object)[text] = 0;
			cast<Map<string, any>>(this._base)[text] = 0;
		}
		elseif (value > 255)
		{
			display_object.text = "255";
			if (revoke_bind == null && cast<Map<string, any>>(this._object)[text] == 1) return;
			cast<Map<string, any>>(this._object)[text] = 1;
			cast<Map<string, any>>(this._base)[text] = 1;
		}
		else
		{
			if (revoke_bind == null && ALittle.Math_Ceil(cast<Map<string, double>>(this._object)[text] * 255) == value) return;
			value = value / 255;
			cast<Map<string, any>>(this._object)[text] = value;
			cast<Map<string, any>>(this._base)[text] = value;
		}
		// 如果新属性跟默认属性一样，那么就把base对应的value设置成null
		if (cast<Map<string, any>>(this._default)[text] != null && cast<Map<string, any> >(this._base)[text] == cast<Map<string, any> >(this._default)[text])
			cast<Map<string, any>>(this._base)[text] = null;
	
		this._tab_child.UpdateHandleQuadLayout(this._tree_logic);
	
		// 设置为false
		this._tab_child.save = false;
	
		var new_base = cast<Map<string, any>>(this._base)[text];
		var new_object = cast<Map<string, any>>(this._object)[text];
		// 生成撤销类
		var old_text:string = null;
		if (display_object != null) old_text = display_object.text;
		var revoke = new IDENatureChangeRevoke(this._tree_logic, text, old_base, new_base, old_object, new_object, old_text,need_reset);
		if (revoke_bind != null) revoke_bind.PushRevoke(revoke);
		else this._tab_child.revoke_list.PushRevoke(revoke);
	}
	
	//number类数据改变，0-1
	public fun Z2OValueInputChange(string text, bool need_reset, [Nullable] ALittle.RevokeBind revoke_bind)
	{
		// 保存旧属性
		var old_base = cast<Map<string, any>>(this._base)[text];
		var old_object = cast<Map<string, any>>(this._object)[text];
		// 设置新的属性
		var display_object:ALittle.DisplayObject = cast<Map<string, any>>(this)["_"..text];
		var value = ALittle.Math_ToDouble(display_object.text);
		if (value == null || value < 0)
		{
			display_object.text = "0";
			if (revoke_bind == null && cast<Map<string, any>>(this._object)[text] == 0) return;
			cast<Map<string, any>>(this._object)[text] = 0;
			cast<Map<string, any>>(this._base)[text] = 0;
		}
		elseif (value > 1)
		{
			display_object.text = "1";
			if (revoke_bind == null && cast<Map<string, any>>(this._object)[text] == 1) return;
			cast<Map<string, any>>(this._object)[text] = 1;
			cast<Map<string, any>>(this._base)[text] = 1;
		}
		else
		{
			if (revoke_bind == null && cast<Map<string, any>>(this._object)[text] == value) return;
			cast<Map<string, any>>(this._object)[text] = value;
			cast<Map<string, any>>(this._base)[text] = value;
		}
		// 如果新属性跟默认属性一样，那么就把base对应的value设置成null	
		if (cast<Map<string, any>>(this._base)[text] == cast<Map<string, any> >(this._default)[text])
			cast<Map<string, any>>(this._base)[text] = null;
	
		this._tab_child.UpdateHandleQuadLayout(this._tree_logic);
	
		// 设置为false
		this._tab_child.save = false;
	
		var new_base = cast<Map<string, any>>(this._base)[text];
		var new_object = cast<Map<string, any>>(this._object)[text];
		// 生成撤销类
		var old_text:string = null;
		if (display_object != null) old_text = display_object.text;
		var revoke = new IDENatureChangeRevoke(this._tree_logic, text, old_base, new_base, old_object, new_object, old_text,need_reset);
		if (revoke_bind != null) revoke_bind.PushRevoke(revoke);
		else this._tab_child.revoke_list.PushRevoke(revoke);
	}
	
	//string
	//默认值可能为空的字符串数据，如：description
	public fun DefaultNilStringInputChange(string text, bool need_reset, [Nullable] ALittle.RevokeBind revoke_bind)
	{
		// 保存旧的属性
		var old_base = cast<Map<string, any>>(this._base)[text];
		var old_object = cast<Map<string, any>>(this._object)[text];
		// 设置新的属性
		var display_object:ALittle.DisplayObject = cast<Map<string, any>>(this)["_"..text];
		if (display_object.text == "")
		{
            if (revoke_bind == null && cast<Map<string, any>>(this._base)[text] == display_object.text) return;

			cast<Map<string, any>>(this._base)[text] = null;
			if (cast<Map<string, any>>(this._default)[text] == null)
				cast<Map<string, any>>(this._object)[text] = null;
			else
			{
				cast<Map<string, any>>(this._object)[text] = cast<Map<string, any>>(this._default)[text];
				display_object.text = cast<Map<string, any>>(this._default)[text];
			}
		}
		else
		{
			if (revoke_bind == null && cast<Map<string, any>>(this._base)[text] == display_object.text) return;
			cast<Map<string, any>>(this._base)[text] = display_object.text;
			cast<Map<string, any>>(this._object)[text] = display_object.text;
	
			// 如果新属性跟默认属性一样，那么就把base对应的value设置成null
			if (cast<Map<string, any>>(this._default)[text] != null && cast<Map<string, any> >(this._base)[text] == cast<Map<string, any> >(this._default)[text])
				cast<Map<string, any>>(this._base)[text] = null;
		}
	
		this._tab_child.UpdateHandleQuadLayout(this._tree_logic);
	
		// 设置为false
		this._tab_child.save = false;
	
		var new_base = cast<Map<string, any>>(this._base)[text];
		var new_object = cast<Map<string, any>>(this._object)[text];
		// 生成撤销类
		var old_text:string = null;
		if (display_object != null) old_text = display_object.text;
		var revoke = new IDENatureChangeRevoke(this._tree_logic, text, old_base, new_base, old_object, new_object, old_text,need_reset);
		if (revoke_bind != null) revoke_bind.PushRevoke(revoke);
		else this._tab_child.revoke_list.PushRevoke(revoke);
	}
	
	//默认值为空串的字符串数据，如：text
	public fun DefaultNoStringInputChange(string text, bool need_reset, [Nullable] ALittle.RevokeBind revoke_bind)
	{
		// 保存旧的属性
		var old_base = cast<Map<string, any>>(this._base)[text];
		var old_object = cast<Map<string, any>>(this._object)[text];
		// 保存新的属性
		var display_object:ALittle.DisplayObject = cast<Map<string, any>>(this)["_"..text];
		if (revoke_bind == null && cast<Map<string, any>>(this._object)[text] == display_object.text) return;
		cast<Map<string, any>>(this._base)[text] = display_object.text;
		cast<Map<string, any>>(this._object)[text] = display_object.text;
		// 如果新属性跟默认属性一样，那么就把base对应的value设置成null
		if (cast<Map<string, any>>(this._default)[text] != null && cast<Map<string, any> >(this._base)[text] == cast<Map<string, any> >(this._default)[text])
			cast<Map<string, any>>(this._base)[text] = null;
	
		this._tab_child.UpdateHandleQuadLayout(this._tree_logic);
	
		// 设置为false
		this._tab_child.save = false;
	
		var new_base = cast<Map<string, any>>(this._base)[text];
		var new_object = cast<Map<string, any>>(this._object)[text];
		// 生成撤销类
		var old_text:string = null;
		if (display_object != null) old_text = display_object.text;
		var revoke = new IDENatureChangeRevoke(this._tree_logic, text, old_base, new_base, old_object, new_object, old_text,need_reset);
		if (revoke_bind != null) revoke_bind.PushRevoke(revoke);
		else this._tab_child.revoke_list.PushRevoke(revoke);
	}
	
	//由于控件本身的特殊性独立出来的函数，用于font_path
	public fun SpecialFontPathInputChange(string text, bool need_reset, [Nullable] ALittle.RevokeBind revoke_bind)
	{
		// 保存旧的属性
		var old_base = cast<Map<string, any>>(this._base)[text];
		var old_object = cast<Map<string, any>>(this._object)[text];
		// 设置新的属性
		var display_object:ALittle.DisplayObject = cast<Map<string, any>>(this)["_"..text];
		if (display_object.text == "")
		{
			if (revoke_bind == null && cast<Map<string, any>>(this._object)[text] == null) return;
			if (cast<Map<string, any>>(this._default)[text] != null)
			{
				display_object.text = cast<Map<string, any>>(this._default)[text];
				cast<Map<string, any>>(this._base)[text] = null;
				cast<Map<string, any>>(this._object)[text] = cast<Map<string, any>>(this._default)[text];
			}
			else
			{
				display_object.text = cast<Map<string, any>>(this._base)[text];
				cast<Map<string, any>>(this._object)[text] = cast<Map<string, any>>(this._base)[text];
			}
		}
		else
		{
			if (revoke_bind == null && cast<Map<string, any>>(this._object)[text] == display_object.text) return;
			cast<Map<string, any>>(this._base)[text] = display_object.text;
			cast<Map<string, any>>(this._object)[text] = display_object.text;
			// 如果新属性跟默认属性一样，那么就把base对应的value设置成null
			if (cast<Map<string, any>>(this._default)[text] != null && cast<Map<string, any> >(this._base)[text] == cast<Map<string, any> >(this._default)[text])
				cast<Map<string, any>>(this._base)[text] = null;
		}
	
		this._tab_child.UpdateHandleQuadLayout(this._tree_logic);
	
		// 设置为false
		this._tab_child.save = false;
		
		var new_base = cast<Map<string, any>>(this._base)[text];
		var new_object = cast<Map<string, any>>(this._object)[text];
		// 生成撤销类
		var old_text:string = null;
		if (display_object != null) old_text = display_object.text;
		var revoke = new IDENatureChangeRevoke(this._tree_logic, text, old_base, new_base, old_object, new_object, old_text,need_reset);
		if (revoke_bind != null) revoke_bind.PushRevoke(revoke);
		else this._tab_child.revoke_list.PushRevoke(revoke);
	}
	
	//bool
	//布尔值的改变
	public fun BoolSelectChange(string text, bool need_reset, Map<bool, string> list, [Nullable] ALittle.RevokeBind revoke_bind)
	{
		// 保存旧的属性
		var old_base = cast<Map<string, any>>(this._base)[text];
		var old_object = cast<Map<string, any>>(this._object)[text];
		// 设置新的属性
		var display_object:ALittle.DisplayObject = cast<Map<string, any>>(this)["_"..text];
		if (display_object.text == list[true])
		{
			if (revoke_bind == null && cast<Map<string, any>>(this._object)[text] == true) return;
			cast<Map<string, any>>(this._object)[text] = true;
			cast<Map<string, any>>(this._base)[text] = true;
		}
		elseif (display_object.text == list[false])
		{
			if (revoke_bind == null && cast<Map<string, any>>(this._object)[text] == false) return;
			cast<Map<string, any>>(this._object)[text] = false;
			cast<Map<string, any>>(this._base)[text] = false;
		}
		else
			ALittle.Log("bool failed");

		// 如果新属性跟默认属性一样，那么就把base对应的value设置成null
		if (cast<Map<string, any>>(this._base)[text] == cast<Map<string, any> >(this._default)[text])
			cast<Map<string, any>>(this._base)[text] = null;

		this._tab_child.UpdateHandleQuadLayout(this._tree_logic);
	
		// 设置为false
		this._tab_child.save = false;
		
		var new_base = cast<Map<string, any>>(this._base)[text];
		var new_object = cast<Map<string, any>>(this._object)[text];
		// 生成撤销类
		var old_text:string = null;
		if (display_object != null) old_text = display_object.text;
		var revoke = new IDENatureChangeRevoke(this._tree_logic, text, old_base, new_base, old_object, new_object, old_text,need_reset);
		if (revoke_bind != null) revoke_bind.PushRevoke(revoke);
		else this._tab_child.revoke_list.PushRevoke(revoke);
	}

	//bool，用于勾选框
	//布尔值的改变
	public fun CheckBoolSelectChange(string text, bool need_reset, [Nullable] ALittle.RevokeBind revoke_bind)
	{
		// 保存旧的属性
		var old_base = cast<Map<string, any>>(this._base)[text];
		var old_object = cast<Map<string, any>>(this._object)[text];
		// 设置新的属性
		var display_object:ALittle.DisplayObject = cast<Map<string, any>>(this)["_"..text];
		if (display_object.selected)
		{
			if (revoke_bind == null && cast<Map<string, any>>(this._object)[text] == true) return;
			cast<Map<string, any>>(this._object)[text] = true;
			cast<Map<string, any>>(this._base)[text] = true;
		}
		else
		{
			if (revoke_bind == null && cast<Map<string, any>>(this._object)[text] == false) return;
			cast<Map<string, any>>(this._object)[text] = false;
			cast<Map<string, any>>(this._base)[text] = false;
		}

		// 如果新属性跟默认属性一样，那么就把base对应的value设置成null
		if (cast<Map<string, any>>(this._base)[text] == cast<Map<string, any> >(this._default)[text])
			cast<Map<string, any>>(this._base)[text] = null;

		this._tab_child.UpdateHandleQuadLayout(this._tree_logic);
	
		// 设置为false
		this._tab_child.save = false;
    
		var new_base = cast<Map<string, any>>(this._base)[text];
		var new_object = cast<Map<string, any>>(this._object)[text];
		// 生成撤销类
		var old_text:string = null;
		if (display_object != null) old_text = display_object.text;
		var revoke = new IDENatureChangeRevoke(this._tree_logic, text, old_base, new_base, old_object, new_object, old_text,need_reset);
		if (revoke_bind != null) revoke_bind.PushRevoke(revoke);
		else this._tab_child.revoke_list.PushRevoke(revoke);
	}
	
	public fun RemoverToNilShowSetForImage(string text, string image_path, bool grid9, bool need_reset, [Nullable] ALittle.RevokeBind revoke_bind)
	{
		if (image_path == "")
			this.RemoverToNilShowSet(text, "", need_reset, revoke_bind);
		else
		{
			if (grid9)
			{
                var ui_manager = g_IDEProject.GetUIManager(this._tree_logic.user_info.module);
                if (ui_manager == null)
                {
					g_AUITool.ShowNotice("错误", "模块不存在:"..this._tree_logic.user_info.module);
					return;
                }
				var display_info = IDEUIUtility_GenerateGrid9ImageInfo(ui_manager.texture_path.."/", image_path);
				if (display_info == null)
				{
					g_AUITool.ShowNotice("错误", "图片不存在:"..image_path);
					return;
				}
				this.RemoverToNilShowSet(text, ALittle.String_JsonEncode(display_info), need_reset, revoke_bind);
			}
			else
			{
				var display_info = new ALittle.DisplayInfo();
				display_info.__class = "Image";
				display_info.texture_name = image_path;
				this.RemoverToNilShowSet(text, ALittle.String_JsonEncode(display_info), need_reset, revoke_bind);
			}
		}
	}
	public fun RemoverToNilShowSetForExtends(string text, string extends_name, bool need_reset, [Nullable] ALittle.RevokeBind revoke_bind)
	{
		if (extends_name != "")
		{
            var ui_manager = g_IDEProject.GetUIManager(this._tree_logic.user_info.module);
			if (ui_manager.control_map[extends_name] == null)
			{
				g_AUITool.ShowNotice("错误", "要继承的控件不存在:"..extends_name);
				return ;
			}
			var display_info = new ALittle.DisplayInfo();
            display_info.__module = this._tree_logic.user_info.module;
			display_info.__extends = extends_name;
			this.RemoverToNilShowSet(text, ALittle.String_JsonEncode(display_info), need_reset, revoke_bind);
		}
		else
			this.RemoverToNilShowSet(text, "", need_reset, revoke_bind);
	}
	//table
	//show类数据修改
	public fun RemoverToNilShowSet(string text, string json_content, bool need_reset, [Nullable] ALittle.RevokeBind revoke_bind)
	{
		var old_base = cast<Map<string, any>>(this._base)[text];
		var old_object = cast<Map<string, any>>(this._object)[text];
		if (json_content == "")
		{
			cast<Map<string, any>>(this._base)[text] = null;
			if (cast<Map<string, any>>(this._default)[text] != null && cast<Map<string, ALittle.DisplayInfo> >(this._default)[text].__class != null)
			{
				var content = cast<Map<string, any>>(this._default)[text];
				var error1, content1 = tcall(ALittle.String_JsonDecode, content);
				if (error1 == null)
				{
					// 最终生成object的数据重新tcall，避免CreateControl对default数据的操作
					var error2, content2 = tcall(ALittle.String_JsonDecode, content1);
					var name = "mnbvcxzasdfghjklpoiuytrewq20160121";
                    var ui_manager = g_IDEProject.GetUIManager(this._tree_logic.user_info.module);
					ui_manager.control.RegisterInfo(name, content2);
					var temp = ui_manager.control.CreateControl{ALittle.DisplayObject}(name);
					cast<Map<string, any>>(this._object)[text] = temp;
					ui_manager.control.UnRegisterInfo(name);
				}
			}
			else
			{
				cast<Map<string, any>>(this._object)[text] = null;
				cast<ALittle.DisplayObject>(cast<Map<string, any>>(this)["_"..text]).text = "";
			}
		}
		else
		{
			var content = json_content;
			var error1, content1:ALittle.DisplayInfo = tcall(ALittle.String_JsonDecode, content);
			if (error1 == null)
			{
				var include = content1.__include;
				if (include == null) include = content1.__extends;
				if (include != null)
				{
                    var ui_manager = g_IDEProject.GetUIManager(content1.__module);
					if (ui_manager.control_map[include] == null)
					{
						g_AUITool.ShowNotice("错误", "指定__include或__extends不存在");
						return;
					}
				}
				cast<Map<string, ALittle.DisplayInfo>>(this._base)[text] = content1;
				var error2, content2:ALittle.DisplayInfo = tcall(ALittle.String_JsonDecode, content);
				var name = "mnbvcxzasdfghjklpoiuytrewq20160121";
                var ui_manager = g_IDEProject.GetUIManager(this._tree_logic.user_info.module);
				ui_manager.control.RegisterInfo(name, content2);
				var temp = ui_manager.control.CreateControl{ALittle.DisplayObject}(name);
				cast<Map<string, any>>(this._object)[text] = temp;
				ui_manager.control.UnRegisterInfo(name);
			}
			else
			{
				g_AUITool.ShowNotice("错误", "输入show设置错误");
				return;
			}
		}
	
		this._tab_child.UpdateHandleQuadLayout(this._tree_logic);
	
		// 设置为false
		this._tab_child.save = false;
	
		var new_base = cast<Map<string, any>>(this._base)[text];
		var new_object = cast<Map<string, any>>(this._object)[text];
		// 生成撤销类
		var old_text:string = null;
		var display_object:ALittle.DisplayObject = cast<Map<string, any>>(this)["_"..text];
		if (display_object != null) old_text = display_object.text;
		var revoke = new IDENatureChangeRevoke(this._tree_logic, text, old_base, new_base, old_object, new_object, old_text, need_reset);
		if (revoke_bind != null) revoke_bind.PushRevoke(revoke);
		else this._tab_child.revoke_list.PushRevoke(revoke);
	}
	
	//初始不为空的show类数据，通过default.__class判断
	public fun RemoverToNilNoNilShowSet(string text, bool need_reset, [Nullable] ALittle.RevokeBind revoke_bind)
	{
		// 保存旧的属性
		var old_base = cast<Map<string, any>>(this._base)[text];
		var old_object = cast<Map<string, any>>(this._object)[text];
		var display_object:ALittle.DisplayObject = cast<Map<string, any>>(this)["_"..text];
		if (display_object.text == "")
		{
			cast<Map<string, any>>(this._base)[text] = null;
			if (cast<Map<string, any>>(this._default)[text] != null
				&& (cast<Map<string, ALittle.DisplayInfo>>(this._default)[text].__class != null
					|| cast<Map<string, ALittle.DisplayInfo>>(this._default)[text].__include != null
					|| cast<Map<string, ALittle.DisplayInfo>>(this._default)[text].__extends != null))
			{
				var content = cast<Map<string, ALittle.DisplayInfo>>(this._default)[text];
				var error, content1 = tcall(ALittle.String_JsonEncode, content);
				if (error != null)
				{
					display_object.text = content1;
					//最终生成object的数据重新tcall，避免CreateControl对default数据的操作
					var error2, content2:ALittle.DisplayInfo = tcall(ALittle.String_JsonDecode, content1);
					var name = "mnbvcxzasdfghjklpoiuytrewq20160121";
                    var ui_manager = g_IDEProject.GetUIManager(this._tree_logic.user_info.module);
					ui_manager.control.RegisterInfo(name, content2);
					var temp = ui_manager.control.CreateControl{ALittle.DisplayObject}(name);
					cast<Map<string, any>>(this._object)[text] = temp;
					ui_manager.control.UnRegisterInfo(name);
				}
			}
			else
				cast<Map<string, any>>(this._object)[text] = null;
		}
		else
		{
			var content = display_object.text;
			var error1, content1:ALittle.DisplayInfo = tcall(ALittle.String_JsonDecode, content);
			if (error1 == null)
			{
				var include = content1.__include;
				if (include == null) include = content1.__extends;
				if (include != null)
				{
                    var ui_manager = g_IDEProject.GetUIManager(content1.__module);
					if (ui_manager.control_map[include] == null)
					{
						g_AUITool.ShowNotice("错误", "指定__include或__extends不存在");
						display_object.text = "";
						return;
					}
				}
				cast<Map<string, any>>(this._base)[text] = content1;
				var error2, content2:ALittle.DisplayInfo = tcall(ALittle.String_JsonDecode, content);
				var name = "mnbvcxzasdfghjklpoiuytrewq20160121";
                var ui_manager = g_IDEProject.GetUIManager(this._tree_logic.user_info.module);
				ui_manager.control.RegisterInfo(name, content2);
				var temp = ui_manager.control.CreateControl{ALittle.DisplayObject}(name);
				cast<Map<string, any>>(this._object)[text] = temp;
				ui_manager.control.UnRegisterInfo(name);
			}
			else
			{
				g_AUITool.ShowNotice("错误", "输入show设置错误");
				display_object.text = "";
				return;
			}
		}
	
		this._tab_child.UpdateHandleQuadLayout(this._tree_logic);
	
		// 设置为false
		this._tab_child.save = false;
	
		var new_base = cast<Map<string, any>>(this._base)[text];
		var new_object = cast<Map<string, any>>(this._object)[text];
		// 生成撤销类
		var old_text:string = null;
		if (display_object != null) old_text = display_object.text;
		var revoke = new IDENatureChangeRevoke(this._tree_logic, text, old_base, new_base, old_object, new_object, old_text,need_reset);
		if (revoke_bind != null) revoke_bind.PushRevoke(revoke);
		else this._tab_child.revoke_list.PushRevoke(revoke);
	}
	
	//表类数据，例：data_list
	public fun TableDataSet(string text, bool need_reset, [Nullable] ALittle.RevokeBind revoke_bind)
	{
		// 保存旧的属性
		var old_base = cast<Map<string, any>>(this._base)[text];
		var old_object = cast<Map<string, any>>(this._object)[text];
		// 设置新的属性
		var display_object:ALittle.DisplayObject = cast<Map<string, any>>(this)["_"..text];
		if (display_object.text == "")
		{
			cast<Map<string, any>>(this._base)[text] = null;
			if (cast<Map<string, any>>(this._default)[text] != null)
			{
				var content = cast<Map<string, any>>(this._default)[text];
				var error, content1 = tcall(ALittle.String_JsonEncode, content);
				if (error == null)
				{
					display_object.text = content1;
					cast<Map<string, any>>(this._object)[text] = content;
				}
			}
			else
				cast<Map<string, any>>(this._object)[text] = null;
		}
		else
		{
			var error, content = tcall(ALittle.String_JsonDecode, display_object.text);
			if (error == null)
			{
				cast<Map<string, any>>(this._base)[text] = content;
				cast<Map<string, any>>(this._object)[text] = content;
			}
			else
			{
				g_AUITool.ShowNotice("输入错误", "输入数据错误");
				display_object.text = "";
				return;
			}
		}
	
		this._tab_child.UpdateHandleQuadLayout(this._tree_logic);
	
		// 设置为false
		this._tab_child.save = false;
	
		var new_base = cast<Map<string, any>>(this._base)[text];
		var new_object = cast<Map<string, any>>(this._object)[text];
		// 生成撤销类
		var old_text:string = null;
		if (display_object != null) old_text = display_object.text;
		var revoke = new IDENatureChangeRevoke(this._tree_logic, text, old_base, new_base, old_object, new_object, old_text,need_reset);
		if (revoke_bind != null) revoke_bind.PushRevoke(revoke);
		else this._tab_child.revoke_list.PushRevoke(revoke);
	}
	
	//target class
	public fun TableDataSetForTargetClass(string text, bool need_reset, [Nullable] ALittle.RevokeBind revoke_bind)
	{
		// 保存旧的属性
		var old_base = cast<Map<string, any>>(this._base)[text];
		var old_object = cast<Map<string, any>>(this._object)[text];
	
		var default_value:any = null;
		if (cast<Map<string, any>>(this._default)[text] != null)
			default_value = ALittle.String_Join(cast<Map<string, List<any>>>(this._default)[text], ".");
		
		// 设置新的属性
		var display_object:ALittle.DisplayObject = cast<Map<string, any>>(this)["_"..text];
		if (display_object.text == "" || display_object.text == default_value)
		{
			if (revoke_bind == null && cast<Map<string, any>>(this._base)[text] == null && cast<Map<string, any>>(this._default)[text] == null) return;
			cast<Map<string, any>>(this._base)[text] = null;
			if (cast<Map<string, any>>(this._default)[text] != null)
			{
				cast<Map<string, any>>(this._object)[text] = cast<Map<string, any>>(this._default)[text];
				display_object.text = default_value;
			}
			else
				cast<Map<string, any>>(this._object)[text] = null;
		}
		else
		{
			var old_content = cast<Map<string, List<any>>>(this._base)[text];
			if (old_content == null) old_content = cast<Map<string, List<any>>>(this._default)[text];
			if (revoke_bind == null && old_content != null && ALittle.String_Join(old_content, ".") == display_object.text) return;
			var content = ALittle.String_Split(display_object.text, ".");
			cast<Map<string, any>>(this._base)[text] = content;
			cast<Map<string, any>>(this._object)[text] = content;
		}
	
		this._tab_child.UpdateHandleQuadLayout(this._tree_logic);
	
		// 设置为false
		this._tab_child.save = false;
	
		var new_base = cast<Map<string, any>>(this._base)[text];
		var new_object = cast<Map<string, any>>(this._object)[text];
		// 生成撤销类
		var old_text:string = null;
		if (display_object != null) old_text = display_object.text;
		var revoke = new IDENatureChangeRevoke(this._tree_logic, text, old_base, new_base, old_object, new_object, old_text,need_reset);
		if (revoke_bind != null) revoke_bind.PushRevoke(revoke);
		else this._tab_child.revoke_list.PushRevoke(revoke);
	}
	
	////////////////////////////////面板读取数据使用函数//////////////////////////////////////////////////////////-
	public fun LoadShowTypeDataForExtends(string text)
	{
		var display_object:ALittle.DisplayObject = cast<Map<string, any>>(this)["_"..text];
		// 获取属性
		var content:ALittle.DisplayInfo = cast<Map<string, any>>(this._base)[text];
		if (content == null) content = cast<Map<string, any>>(this._default)[text];
		if (content != null)
		{
			var include = content.__extends;
			if (include == null) include = content.__include;
			if (include != null)
				display_object.text = include;
			else
				display_object.text = "";
		}
		else
			display_object.text = "";
	}
	public fun LoadShowTypeDataForImage(string text)
	{
		var display_object:ALittle.DisplayObject = cast<Map<string, any>>(this)["_"..text];
		var display_object_grid9:ALittle.DisplayObject = cast<Map<string, any>>(this)["_"..text.."_grid9"];
		// 获取属性
		var content:ALittle.DisplayInfo = cast<Map<string, any>>(this._base)[text];
		if (content == null) content = cast<Map<string, any>>(this._default)[text];
		if (content != null)
		{
			if (content.__class == "Image")
			{
				if (content.texture_name != null)
					display_object.text = content.texture_name;
				else
					display_object.text = "";
				display_object_grid9.selected = false;
			}
			elseif (content.__class == "Grid9Image")
			{
				if (content.texture_name != null)
					display_object.text = content.texture_name;
				else
					display_object.text = "";
				display_object_grid9.selected = true;
			}
			else
			{
				display_object.text = "";
				display_object_grid9.selected = false;
			}
		}
		else
		{
			display_object.text = "";
			display_object_grid9.selected = false;
		}
	}
	//target class
	public fun LoadShowTypeDataForTargetClass(string text)
	{
		var display_object:ALittle.DisplayObject = cast<Map<string, any>>(this)["_"..text];
		// 获取属性
		var content:List<string> = cast<Map<string, any>>(this._base)[text];
		if (content == null) content = cast<Map<string, any>>(this._default)[text];
		if (content != null)
			display_object.text = ALittle.String_Join(content, ".");
		else
			display_object.text = "";
	}
	//show
	//读取show类数据，需要转化
	public fun LoadShowTypeData(string text)
	{
		var display_object:ALittle.DisplayObject = cast<Map<string, any>>(this)["_"..text];
		// 获取属性
		var content:List<string> = cast<Map<string, any>>(this._base)[text];
		if (content == null) content = cast<Map<string, any>>(this._default)[text];
		if (content != null)
		{
			var error, object = tcall(ALittle.String_JsonEncode, content);
			if (error == null)
				display_object.text = object;
			else 
				ALittle.Log("encode failed:"..error);
		}
		else
			display_object.text = "";
	}
	
	//获取show类数据，由于部分show类数据初始值不为null，所以通过判断default.__class来获取数据
	public fun LoadShowTypeNoNilData(string text)
	{
		var display_object:ALittle.DisplayObject = cast<Map<string, any>>(this)["_"..text];
		// 获取属性
		if (cast<Map<string, any>>(this._default)[text] != null
			&& (cast<Map<string, ALittle.DisplayInfo>>(this._default)[text].__class != null
				|| cast<Map<string, ALittle.DisplayInfo>>(this._default)[text].__include != null
				|| cast<Map<string, ALittle.DisplayInfo>>(this._default)[text].__extends != null))
		{
			var content:List<string> = cast<Map<string, any>>(this._base)[text];
			if (content == null) content = cast<Map<string, any>>(this._default)[text];
			if (content != null)
			{
				var error, new_content = tcall(ALittle.String_JsonEncode, content);
				if (error == null)
					display_object.text = new_content;
				else 
					ALittle.Log("encode failed:"..error);
			}
			else
				display_object.text = "";
		}
		else
		{
			var content = cast<Map<string, any>>(this._base)[text];
			if (content != null)
			{
				var error, new_content = tcall(ALittle.String_JsonEncode, content);
				if (error == null)
					display_object.text = new_content;
				else 
					ALittle.Log("encode failed:"..error);
			}
			else
				display_object.text = "";
		}
	}
        
	// any
	// 任意值读取
	public fun LoadValueData(string text)
	{
		var display_object:ALittle.DisplayObject = cast<Map<string, any>>(this)["_"..text];
		if (cast<Map<string, any>>(this._base)[text] != null)
			display_object.text = cast<Map<string, any>>(this._base)[text];
		else
			display_object.text = cast<Map<string, any>>(this._default)[text];
	}
        
	// any 任意类型
	public fun LoadEnumData(string text, Map<string, any> list)
	{
		var display_object:ALittle.DisplayObject = cast<Map<string, any>>(this)["_"..text];
		if (cast<Map<string, any>>(this._base)[text] != null)
			display_object.text = list[cast<Map<string, any>>(this._base)[text]];
		else
			display_object.text = list[cast<Map<string, any>>(this._default)[text]];
	}

	// 颜色
	public fun LoadColorData(string text)
	{
		var display_object:ALittle.DisplayObject = cast<Map<string, any>>(this)["_"..text];
        
		var color:double = cast<Map<string, any>>(this._base)[text];
		if (color == null) color = cast<Map<string, any>>(this._default)[text];
		display_object.text = ALittle.Math_Floor(color*255);
	}
	
	//bool
	//布尔值的读取，bool为true || false 表示默认值
	public fun LoadBoolData(string text, bool default_bool, Map<bool, string> list)
	{
		var display_object:ALittle.DisplayObject = cast<Map<string, any>>(this)["_"..text];
		var temp = default_bool;
		if (cast<Map<string, any>>(this._base)[text] != null)
			temp = cast<Map<string, any>>(this._base)[text];
		else
			temp = cast<Map<string, any>>(this._default)[text];
		if (temp)
		{
			if (display_object != null)
				display_object.text = list[true];
			else
				ALittle.Warn(text);
		}
		else
		{
			if (display_object != null)
				display_object.text = list[false];
			else
				ALittle.Warn(text);
		}
	}

	//bool 用于勾选框
	//布尔值的读取，bool为true || false 表示默认值
	public fun LoadCheckBoolData(string text, bool default_bool)
	{
		var display_object:ALittle.DisplayObject = cast<Map<string, any>>(this)["_"..text];
		var temp = default_bool;
		if (cast<Map<string, any>>(this._base)[text] != null)
			temp = cast<Map<string, any>>(this._base)[text];
		else
			temp = cast<Map<string, any>>(this._default)[text];

		if (display_object != null)
			display_object.selected = temp;
		else
			ALittle.Warn(text);
	}
	
	//select
	//选择类值的获取
	public fun LoadTypeSelectData(string text, Map<int, string> list)
	{
		var content = cast<Map<string, any>>(this._base)[text];
		if (content == null) content = cast<Map<string, any>>(this._default)[text];
		cast<ALittle.DisplayObject>(cast<Map<string, any>>(this)["_"..text]).text = list[content];
	}
	
	// 默认为空的string数据读取
	public fun LoadDefaultNilString(string text)
	{
		var display_object:ALittle.DisplayObject = cast<Map<string, any>>(this)["_"..text];
		var content = cast<Map<string, any>>(this._base)[text];
		if (content == null) content = cast<Map<string, any>>(this._default)[text];
		if (content != null)
			display_object.text = content;
		else
			display_object.text = "";
	}
	
	//选择图片路径
	public fun ImagePathSelectCallback(string text, Functor<(DisplayObjectS, ALittle.UIEvent)> callback, ALittle.RevokeBind revoke_bind, string path, bool need_reset)
	{
        var ui_manager = g_IDEProject.GetUIManager(this._tree_logic.user_info.module);
        if (ui_manager == null)
        {
            g_AUITool.ShowNotice("错误", "模块不存在:"..this._tree_logic.user_info.module);
            return;
        }

		var display_object:ALittle.DisplayObject = cast<Map<string, any>>(this)["_"..text];
		display_object.text = path;
		var e = new ALittle.UIFocusOutEvent();
		e.target = display_object;
		callback(this, e);

		// 获取图片大小
        if (need_reset)
        {
            var surface = carp.LoadCarpSurface(ui_manager.texture_path.."/"..path);
            if (surface == null) return;
            var w = carp.GetCarpSurfaceWidth(surface);
            var h = carp.GetCarpSurfaceHeight(surface);
            carp.FreeCarpSurface(surface);
            var new_revoke = false;
            if (revoke_bind == null) { new_revoke = true; revoke_bind = new ALittle.RevokeBind(); }
            this.SetWType(ALittle.UIEnumTypes.SIZE_ABS, revoke_bind);
            this.SetHType(ALittle.UIEnumTypes.SIZE_ABS, revoke_bind);
            this.SetWValue(w, revoke_bind);
            this.SetHValue(h, revoke_bind);
            if (new_revoke) this._tab_child.revoke_list.PushRevoke(revoke_bind);
        }
	}

    //设置texture_name
    public fun SetTextureName(string texture_name, [Nullable] ALittle.RevokeBind revoke_bind)
    {
        // 用于子类继承
    }
}