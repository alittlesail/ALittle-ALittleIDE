
namespace ALittleIDE;

public class DropDownS : TextCheckButtonS
{
	private ALittle.DisplayObject _show_background;
	private ALittle.DisplayObject _show_background_grid9;
	private ALittle.DisplayObject _show_scrollbar;
	
	public ctor(IDEUITreeUserInfo user_info, IDEUITabChild tab_child, IDEUITreeLogic tree_logic)
	{
		// 设置面板的UI
		this._layer_name = "ide_setting_dropdown";
	}
	
	public fun LoadNatureBase()
	{
		TextCheckButtonS.LoadNatureBase(this);
		this.LoadShowTypeDataForImage("show_background");
		this.LoadShowTypeDataForExtends("show_scrollbar");
		this.LoadDefaultNilString("button_style");
		this.LoadValueData("show_count");
		this.LoadValueData("body_margin");
		this.LoadValueData("screen_margin_left");
		this.LoadValueData("screen_margin_right");
		this.LoadValueData("screen_margin_top");
		this.LoadValueData("screen_margin_bottom");
		this.LoadShowTypeData("data_list"); 
	}
	
	public fun HandleShowBackGFOCUSOUT(ALittle.UIEvent event)
	{
		if (event.target._user_data != null)
		{
			if (event.target._user_data == event.target.text) return;
			event.target._user_data = event.target.text;
		}
		this.RemoverToNilShowSetForImage("show_background", this._show_background.text, this._show_background_grid9.selected, false);
	}
	public async fun HandleShowBackGSelect(ALittle.UIEvent event)
	{
        var ui_manager = g_IDEProject.GetUIManager(this._tree_logic.user_info.module);
        if (ui_manager == null)
        {
            g_AUITool.ShowNotice("错误", "模块不存在:"..this._tree_logic.user_info.module);
            return;
        }

		g_IDEImageSelectDialog.SetBasePath(ui_manager.texture_path);
		var path = g_IDEImageSelectDialog.ShowSelect();
		if (path == null) return;
		this.ImagePathSelectCallback("show_background", this.HandleShowBackGFOCUSOUT, null, path, false);
	}
	
	public fun HandleShowScrollBarFOCUSOUT(ALittle.UIEvent event)
	{
		if (event.target._user_data != null)
		{
			if (event.target._user_data == event.target.text) return;
			event.target._user_data = event.target.text;
		}
		this.RemoverToNilShowSetForExtends("show_scrollbar", this._show_scrollbar.text, false);
	}
	
	public fun HandleButtonStyleFOCUSOUT(ALittle.UIEvent event)
	{
		this.DefaultNilStringInputChange("button_style", false);
	}
	
	public fun HandleShowCountFOCUSOUT(ALittle.UIEvent event)
	{
		this.ValueNumZInputChange("show_count", false);
	}
	
	public fun HandleBodyMarginFOCUSOUT(ALittle.UIEvent event)
	{
		this.ValueNumInputChange("body_margin", false);
	}
	
	public fun HandleScreenMarginLeftFOCUSOUT(ALittle.UIEvent event)
	{
		this.ValueNumInputChange("screen_margin_left", false);
	}
	
	public fun HandleScreenMarginRightFOCUSOUT(ALittle.UIEvent event)
	{
		this.ValueNumInputChange("screen_margin_right", false);
	}
	
	public fun HandleScreenMarginTopFOCUSOUT(ALittle.UIEvent event)
	{
		this.ValueNumInputChange("screen_margin_top", false);
	}
	
	public fun HandleScreenMarginBottomFOCUSOUT(ALittle.UIEvent event)
	{
		this.ValueNumInputChange("screen_margin_bottom", false);
	}
	
	public fun HandleDatalistFOCUSOUT(ALittle.UIEvent event)
	{
		if (event.target._user_data != null)
		{
			if (event.target._user_data == event.target.text) return;
			event.target._user_data = event.target.text;
		}
		this.TableDataSet("data_list", false);
	}
}