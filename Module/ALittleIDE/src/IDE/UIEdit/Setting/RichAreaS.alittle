
namespace ALittleIDE;

public class RichAreaS : DisplayLayoutS
{
	public ctor(IDEUITreeUserInfo user_info, IDEUITabChild tab_child, IDEUITreeLogic tree_logic)
	{
		this._layer_name = "ide_setting_richarea";
	}
	
	public fun LoadNatureBase()
	{
		DisplayLayoutS.LoadNatureBase(this);
		this.LoadValueData("line_spacing");
		this.LoadValueData("max_line_count");
		this.LoadTypeSelectData("halign", g_IDEEnum.HALIGN_type);
		this.LoadTypeSelectData("valign", g_IDEEnum.VALIGN_type);
		this.LoadShowTypeData("display_list");
	}
	
	public fun HandleLineSpacingFOCUSOUT(ALittle.UIEvent event)
	{
		this.ValueNumInputChange("line_spacing",true);
	}
	
	public fun HandleMaxLineCountFOCUSOUT(ALittle.UIEvent event)
	{
		this.ValueNumInputChange("max_line_count", true);
	}
	
	public fun HandleHalignSELECT_CHANGE(ALittle.UIEvent event)
	{
		var list = g_IDEEnum.HALIGN_rtype;
		this.TypeSelectChange("halign", cast<Map<string, any>>(list), false);
	}
	
	public fun HandleValignSELECT_CHANGE(ALittle.UIEvent event)
	{
		var list = g_IDEEnum.VALIGN_rtype;
		this.TypeSelectChange("valign", cast<Map<string, any>>(list), false);
	}
	
	public fun HandleDisplayListFOCUSOUT(ALittle.UIEvent event)
	{
		if (event.target._user_data != null)
		{
			if (event.target._user_data == event.target.text) return;
			event.target._user_data = event.target.text;
		}
		this.TableDataSet("display_list",true);
	}
}