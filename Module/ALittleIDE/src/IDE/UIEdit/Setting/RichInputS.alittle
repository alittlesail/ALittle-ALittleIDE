
namespace ALittleIDE;

public class RichInputS : DisplayLayoutS
{
    private ALittle.DisplayObject _start_cursor;
    private ALittle.DisplayObject _end_cursor;

    public ctor(IDEUITreeUserInfo user_info, IDEUITabChild tab_child, IDEUITreeLogic tree_logic)
    {
        this._layer_name = "ide_setting_richinput";
    }
    
    public fun LoadNatureBase()
    {
        DisplayLayoutS.LoadNatureBase(this);
        this.LoadDefaultNilString("font_path");
        this.LoadDefaultNilString("font_size");
        this.LoadShowTypeData("display_list");
        this.LoadBoolData("editable", true, g_IDEEnum.yn_type);
        this.LoadBoolData("can_drag_text", true, g_IDEEnum.yn_type);
        this.LoadBoolData("focus_cursor", true, g_IDEEnum.yn_type);
        this.LoadBoolData("password_mode", true, g_IDEEnum.yn_type);
        this.LoadBoolData("input_align", true, g_IDEEnum.yn_type);
    
        this.LoadDefaultNilString("default_text");
        this.LoadValueData("default_text_alpha");
        this.LoadColorData("cursor_red");
        this.LoadColorData("cursor_green");
        this.LoadColorData("cursor_blue");
        this.LoadColorData("font_red");
        this.LoadColorData("font_green");
        this.LoadColorData("font_blue");

        this.LoadValueData("margin_halign");
        this.LoadValueData("margin_valign");
        this.LoadValueData("cursor_margin_up");
        this.LoadValueData("cursor_margin_down");

        this.LoadValueData("ims_padding");
        
        this.LoadShowTypeDataForExtends("start_cursor");
        this.LoadShowTypeDataForExtends("end_cursor");
    }
    
    public fun HandleFontPathFOCUSOUT(ALittle.UIEvent event)
    {
        this.SpecialFontPathInputChange("font_path", false);
    }
    
    public fun HandleFontSizeFOCUSOUT(ALittle.UIEvent event)
    {
        this.ValueNumZInputChange("font_size", false);
    }
    
    public fun HandleFontRedFOCUSOUT(ALittle.UIEvent event)
    {
        this.ColorValueInputChange("font_red", false);
    }
    
    public fun HandleFontGreenFOCUSOUT(ALittle.UIEvent event)
    {
        this.ColorValueInputChange("font_green", false);
    }
    
    public fun HandleFontBlueFOCUSOUT(ALittle.UIEvent event)
    {
        this.ColorValueInputChange("font_blue", false);
    }
    
    public fun HandleCursorRedFOCUSOUT(ALittle.UIEvent event)
    {
        this.ColorValueInputChange("cursor_red", false);
    }
    
    public fun HandleCursorGreenFOCUSOUT(ALittle.UIEvent event)
    {
        this.ColorValueInputChange("cursor_green", false);
    }
    
    public fun HandleCursorBlueFOCUSOUT(ALittle.UIEvent event)
    {
        this.ColorValueInputChange("cursor_blue", false);
    }
    
    public fun HandleDisplayListFOCUSOUT(ALittle.UIEvent event)
    {
        if (event.target._user_data != null)
        {
            if (event.target._user_data == event.target.text) return;
            event.target._user_data = event.target.text;
        }
        this.TableDataSet("display_list",true);
    }
    
    public fun HandleEditableSELECT_CHANGE(ALittle.UIEvent event)
    {
        this.BoolSelectChange("editable", false, g_IDEEnum.yn_type);
    }
    
    public fun HandleFocusCurosrSELECT_CHANGE(ALittle.UIEvent event)
    {
        this.BoolSelectChange("focus_cursor", false, g_IDEEnum.yn_type);
    }
    
    public fun HandleCanDragTextSELECT_CHANGE(ALittle.UIEvent event)
    {
        this.BoolSelectChange("can_drag_text", false, g_IDEEnum.yn_type);
    }
    
    public fun HandleMarginHalignFOCUSOUT(ALittle.UIEvent event)
    {
        this.ValueNumInputChange("margin_halign", false);
    }
    
    public fun HandleMarginValignFOCUSOUT(ALittle.UIEvent event)
    {
        this.ValueNumInputChange("margin_valign", false);
    }
    
    public fun HandleCursorMarginUpFOCUSOUT(ALittle.UIEvent event)
    {
        this.ValueNumInputChange("cursor_margin_up", false);
    }
    
    public fun HandleCursorMarginDownFOCUSOUT(ALittle.UIEvent event)
    {
        this.ValueNumInputChange("cursor_margin_down", false);
    }
    
    public fun HandleStartCursorFOCUSOUT(ALittle.UIEvent event)
    {
        if (event.target._user_data != null)
        {
            if (event.target._user_data == event.target.text) return;
            event.target._user_data = event.target.text;
        }
        this.RemoverToNilShowSetForExtends("start_cursor", this._start_cursor.text, false);
    }
    
    public fun HandleEndCursorFOCUSOUT(ALittle.UIEvent event)
    {
        if (event.target._user_data != null)
        {
            if (event.target._user_data == event.target.text) return;
            event.target._user_data = event.target.text;
        }
        this.RemoverToNilShowSetForExtends("end_cursor", this._end_cursor.text, false);
    }
    
    public fun HandlePasswordModeSELECT_CHANGE(ALittle.UIEvent event)
    {
        this.BoolSelectChange("password_mode", false, g_IDEEnum.yn_type);
    }
    
    public fun HandleInputAlignSELECT_CHANGE(ALittle.UIEvent event)
    {
        this.BoolSelectChange("input_align", false, g_IDEEnum.yn_type);
    }

    public fun HandleDefaultTextFOCUSOUT(ALittle.UIEvent event)
    {
        this.DefaultNoStringInputChange("default_text", false);
    }
    
    public fun HandleDefaultTextAlphaFOCUSOUT(ALittle.UIEvent event)
    {
        this.Z2OValueInputChange("default_text_alpha", false);
    }
    
    public fun HandleImsPaddingFOCUSOUT(ALittle.UIEvent event)
    {
        this.ValueNumInputChange("ims_padding", false);
    }
    
    public fun HandleRegexFOCUSOUT(ALittle.UIEvent event)
    {
        this.DefaultNoStringInputChange("regex", false);
    }
    
    public fun HandleLimitLenFOCUSOUT(ALittle.UIEvent event)
    {
        this.ValueNumInputChange("limit_len", false);
    }
}