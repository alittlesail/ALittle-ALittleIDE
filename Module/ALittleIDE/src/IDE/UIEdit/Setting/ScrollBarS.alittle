
namespace ALittleIDE;

public class ScrollBarS : Grid3S
{
    private ALittle.DisplayObject _up_button;
    private ALittle.DisplayObject _down_button;
    private ALittle.DisplayObject _bar_button;
    private ALittle.DisplayObject _bar_background;
    private ALittle.DisplayObject _bar_background_grid9;

    public ctor(IDEUITreeUserInfo user_info, IDEUITabChild tab_child, IDEUITreeLogic tree_logic)
    {
        this._layer_name = "ide_setting_scrollbar";
    }
    
    public fun LoadNatureBase()
    {
        Grid3S.LoadNatureBase(this);

        this.LoadValueData("total_size");
        this.LoadValueData("show_size");
        this.LoadValueData("offset_rate");
        this.LoadValueData("offset_step");
        this.LoadShowTypeDataForExtends("up_button");
        this.LoadShowTypeDataForExtends("down_button");
        this.LoadShowTypeDataForExtends("bar_button");
        this.LoadShowTypeDataForImage("bar_background");
    }
    
    public fun HandleTotleSizeFOCUSOUT(ALittle.UIEvent event)
    {
        this.ValueNumInputChange("total_size", false);
    }
    
    public fun HandleShowSizeFOCUSOUT(ALittle.UIEvent event)
    {
        this.ValueNumInputChange("show_size", false);
    }
    
    public fun HandleOffsetRateFOCUSOUT(ALittle.UIEvent event)
    {
        this.Z2OValueInputChange("offset_rate", false);
    }
    
    public fun HandleOffsetStepFOCUSOUT(ALittle.UIEvent event)
    {
        this.Z2OValueInputChange("offset_step", false);
    }
    
    public fun HandleUpButtonFOCUSOUT(ALittle.UIEvent event)
    {
        if (event.target._user_data != null)
        {
            if (event.target._user_data == event.target.text) return;
            event.target._user_data = event.target.text;
        }
        this.RemoverToNilShowSetForExtends("up_button", this._up_button.text, false);
    }
    
    public fun HandleDownButtonFOCUSOUT(ALittle.UIEvent event)
    {
        if (event.target._user_data != null)
        {
            if (event.target._user_data == event.target.text) return;
            event.target._user_data = event.target.text;
        }
        this.RemoverToNilShowSetForExtends("down_button", this._down_button.text, false);
    }
    
    public fun HandleBarButtonFOCUSOUT(ALittle.UIEvent event)
    {
        if (event.target._user_data != null)
        {
            if (event.target._user_data == event.target.text) return;
            event.target._user_data = event.target.text;
        }
        this.RemoverToNilShowSetForExtends("bar_button", this._bar_button.text, false);
    }
    
    public fun HandleBarBackFOCUSOUT(ALittle.UIEvent event)
    {
        if (event.target._user_data != null)
        {
            if (event.target._user_data == event.target.text) return;
            event.target._user_data = event.target.text;
        }
        this.RemoverToNilShowSetForImage("bar_background", this._bar_background.text, this._bar_background_grid9.selected, false);
    }
    public async fun HandleBarBackSelect(ALittle.UIEvent event)
    {
        var ui_manager = g_IDEProject.GetUIManager(this._tree_logic.user_info.module);
        if (ui_manager == null)
        {
            g_AUITool.ShowNotice("错误", "模块不存在:"..this._tree_logic.user_info.module);
            return;
        }

		g_IDEImageSelectDialog.SetBasePath(ui_manager.texture_path);
		var path = g_IDEImageSelectDialog.ShowSelect();
		if (path == null) return;
		this.ImagePathSelectCallback("bar_background", this.HandleBarBackFOCUSOUT, null, path, false);
    }
}