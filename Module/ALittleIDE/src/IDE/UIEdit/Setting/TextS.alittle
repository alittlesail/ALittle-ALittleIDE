
namespace ALittleIDE;

public class TextS : DisplayObjectS
{
	private ALittle.DisplayObject _text;
	private ALittle.DisplayObject _flip;

	public ctor(IDEUITreeUserInfo user_info, IDEUITabChild tab_child, IDEUITreeLogic tree_logic)
	{
		this._layer_name = "ide_setting_text";
	}

	public fun LoadNatureBase()
	{
		DisplayObjectS.LoadNatureBase(this);
	
		this.LoadBoolData("bold", false, g_IDEEnum.yn_type);
		this.LoadBoolData("underline", false, g_IDEEnum.yn_type);
		this.LoadBoolData("deleteline", false, g_IDEEnum.yn_type);
		this.LoadBoolData("italic", false, g_IDEEnum.yn_type);
		this.LoadValueData("text");
		this.LoadDefaultNilString("font_path");
		this.LoadDefaultNilString("font_size");
		this.LoadEnumData("flip", cast<Map<string, any>>(g_IDEEnum.flip_type));
	}
	//bold
	public fun HandleBoldSELECT_CHANGE(ALittle.UIEvent event)
	{
		this.BoolSelectChange("bold", false, g_IDEEnum.yn_type);
	}
	//underline
	public fun HandleUnderLineSELECT_CHANGE(ALittle.UIEvent event)
	{
		this.BoolSelectChange("underline", false, g_IDEEnum.yn_type);
	}
	//deleteline
	public fun HandleDeleteLineSELECT_CHANGE(ALittle.UIEvent event)
	{
		this.BoolSelectChange("deleteline", false, g_IDEEnum.yn_type);
	}
	//italic
	public fun HandleItalicSELECT_CHANGE(ALittle.UIEvent event)
	{
		this.BoolSelectChange("italic", false, g_IDEEnum.yn_type);
	}
	//text
	public fun HandleTextFOCUSOUT(ALittle.UIEvent event)
	{
		if (this._default.__class == "Text")
			this.DefaultNoStringInputChange("text", true);
		else
			this.DefaultNoStringInputChange("text", false);
		this._tree_logic.UpdateDesc();
	}
	//font_path
	public fun HandleFontPathFOCUSOUT(ALittle.UIEvent event)
	{
		if (this._default.__class == "Text")
			this.SpecialFontPathInputChange("font_path", true);
		else
			this.SpecialFontPathInputChange("font_path", false);
	}
	//font_size
	public fun HandleFontSizeFOCUSOUT(ALittle.UIEvent event)
	{
		if (this._default.__class == "Text")
			this.ValueNumZInputChange("font_size", true);
		else
			this.ValueNumZInputChange("font_size", false);
	}
	
	public fun HandleFlipSELECT_CHANGE(ALittle.UIEvent event)
	{
		var list = g_IDEEnum.flip_rtype;
		this.TypeSelectChange("flip", cast<Map<string,any>>(list), false);
	}
}