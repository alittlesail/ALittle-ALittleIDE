
namespace ALittleIDE;

public class ScrollScreenS : DisplayLayoutS
{
	private ALittle.DisplayObject _container;
	private ALittle.DisplayObject _right_scrollbar;
	private ALittle.DisplayObject _bottom_scrollbar;

	public ctor(IDEUITreeUserInfo user_info, IDEUITabChild tab_child, IDEUITreeLogic tree_logic)
	{
		this._layer_name = "ide_setting_scrollscreen";
	}
	
	public fun LoadNatureBase()
	{
		DisplayLayoutS.LoadNatureBase(this);
		this.LoadShowTypeDataForExtends("container");
		this.LoadShowTypeDataForExtends("right_scrollbar");
		this.LoadShowTypeDataForExtends("bottom_scrollbar");
		this.LoadBoolData("open_extends_drag", true, g_IDEEnum.yn_type);
	}
	
	public fun HandleContainerFOCUSOUT(ALittle.UIEvent event)
	{
		if (event.target._user_data != null)
		{
			if (event.target._user_data == event.target.text) return;
			event.target._user_data = event.target.text;
		}
		this.RemoverToNilShowSetForExtends("container", this._container.text, false);
	}
	
	public fun HandleRightSFOCUSOUT(ALittle.UIEvent event)
	{
		if (event.target._user_data != null)
		{
			if (event.target._user_data == event.target.text) return;
			event.target._user_data = event.target.text;
		}
		this.RemoverToNilShowSetForExtends("right_scrollbar", this._right_scrollbar.text, false);
	}
	
	public fun HandleBottomBFOCUSOUT(ALittle.UIEvent event)
	{
		if (event.target._user_data != null)
		{
			if (event.target._user_data == event.target.text) return;
			event.target._user_data = event.target.text;
		}
		this.RemoverToNilShowSetForExtends("bottom_scrollbar", this._bottom_scrollbar.text, false);
	}
	
	public fun HandleHandOpenExtendsDragSELECT_CHANGE(ALittle.UIEvent event)
	{
		this.BoolSelectChange("open_extends_drag", false, g_IDEEnum.yn_type);
	}
}