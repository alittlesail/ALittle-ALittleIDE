
namespace ALittleIDE;

public class TextEditS : TextS
{
	public ctor(IDEUITreeUserInfo user_info, IDEUITabChild tab_child, IDEUITreeLogic tree_logic)
	{
		this._layer_name = "ide_setting_textedit";
	}
	
	public fun LoadNatureBase()
	{
		TextS.LoadNatureBase(this);
		this.LoadBoolData("editable", true, g_IDEEnum.yn_type);
		this.LoadColorData("cursor_red");
		this.LoadColorData("cursor_green");
		this.LoadColorData("cursor_blue");
		this.LoadDefaultNilString("default_text");
		this.LoadValueData("default_text_alpha");
		this.LoadValueData("ims_padding");
	}
	//editable
	public fun HandleEditableSELECT_CHANGE(ALittle.UIEvent event)
	{
		this.BoolSelectChange("editable", false, g_IDEEnum.yn_type);
	}
	//cursor_red
	public fun HandleCursorRedFOCUSOUT(ALittle.UIEvent event)
	{
		this.ColorValueInputChange("cursor_red", false);
	}
	//cursor_red
	public fun HandleCursorGreenFOCUSOUT(ALittle.UIEvent event)
	{
		this.ColorValueInputChange("cursor_green", false);
	}
	//cursor_red
	public fun HandleCursorBlueFOCUSOUT(ALittle.UIEvent event)
	{
		this.ColorValueInputChange("cursor_blue", false);
	}
	
	public fun HandleDefaultTextFOCUSOUT(ALittle.UIEvent event)
	{
		this.DefaultNoStringInputChange("default_text", false);
	}
	
	public fun HandleDefaultTextAlphaFOCUSOUT(ALittle.UIEvent event)
	{
		this.Z2OValueInputChange("default_text_alpha", false);
	}
	
	public fun HandleImsPaddingFOCUSOUT(ALittle.UIEvent event)
	{
		this.ValueNumInputChange("ims_padding", false);
	}
	
	public fun HandleRegexFOCUSOUT(ALittle.UIEvent event)
	{
		this.DefaultNoStringInputChange("regex", false);
	}
	
	public fun HandleLimitLenFOCUSOUT(ALittle.UIEvent event)
	{
		this.ValueNumInputChange("limit_len", false);
	}
}