
namespace ALittleIDE;

public class IDEAttrTextDialog
{
	private ALittle.DisplayObject _dialog;
	private DisplayObjectS _target_panel;
	private string _target_text;
	private bool _target_need_reset;

	private ALittle.DisplayObject _bold;
	private ALittle.DisplayObject _underline;
	private ALittle.DisplayObject _deleteline;
	private ALittle.DisplayObject _italic;
	private ALittle.DisplayObject _font_path;
	private ALittle.DisplayObject _font_size;

	private ALittle.DisplayObject _red;
	private ALittle.DisplayObject _green;
	private ALittle.DisplayObject _blue;
	
	////////////////////////////////////////////////////////////////////////////////////////
	public fun ShowDialog(DisplayObjectS target_panel, string text, bool need_reset)
	{
		// 创建模态提示对话框，并添加到模态层
		if (this._dialog == null)
		{
			this._dialog = g_Control.CreateControl{ALittle.DisplayObject}("ide_text_edit_dialog", this);
			A_LayerManager.AddToModal(this._dialog);
		}
		// 显示提示对话框，设置标题和内容
		this._dialog.visible = true;
		this._target_panel = target_panel;
		this._target_text = text;
		this._target_need_reset = need_reset;
		this.ResetText();
	}
	public fun HideDialog()
	{
		this._dialog.visible = false;
	}
	
	public fun ReadColor(string text) : double
	{
		var display_object:ALittle.DisplayObject = cast<Map<string,any>>(this)["_"..text];
		var value = ALittle.Math_ToDouble(display_object.text);
		if (value == null || value < 0)
		{
			display_object.text = "0";
			return 0;
		}
		elseif (value > 255)
		{
			display_object.text = "255";
			return 1;
		}
		else
		{
			value = value / 255;
			return value;
		}
	}
	
	public fun HandleEditChanged(ALittle.UIEvent event)
	{
		var info = new ALittle.DisplayInfo();
		info.__class = "Text";
		if (this._bold.text == "是") info.bold = true;
		if (this._underline.text == "是") info.underline = true;
		if (this._deleteline.text == "是") info.deleteline = true;
		if (this._italic.text == "是") info.italic = true;
		if (this._font_path.text != "") info.font_path = this._font_path.text;
		if (this._font_size.text != "") info.font_size = ALittle.Math_ToInt(this._font_size.text);
		info.red = this.ReadColor("red");
		if (info.red == 1) info.red = null;
		info.green = this.ReadColor("green");
		if (info.green == 1) info.green = null;
		info.blue = this.ReadColor("blue");
		if (info.blue == 1) info.blue = null;
		var info_json = ALittle.String_JsonEncode(info);
		cast<ALittle.DisplayObject>(cast<Map<string,any>>(this._target_panel)["_"..this._target_text]).text = info_json;
		this._target_panel.RemoverToNilShowSet(this._target_text, info_json, this._target_need_reset);
	}
	
	public fun ResetText()
	{
		var info:ALittle.DisplayInfo = cast<Map<string, any>>(this._target_panel.base)[this._target_text];
        if (info == null) info = cast<Map<string, any>>(this._target_panel.default)[this._target_text];
		if (info == null) info = new ALittle.DisplayInfo();
		this._bold.text = "否";
		if (info.bold) this._bold.text = "是";
		this._underline.text = "否";
		if (info.underline) this._underline.text = "是";
		this._deleteline.text = "否";
		if (info.deleteline) this._deleteline.text = "是";
		this._italic.text = "否";
		if (info.italic) this._italic.text = "是";
		this._font_path.text = "";
		if (g_IDEProject.project != null)
			this._font_path.text = g_IDEProject.project.config.GetConfig("default_font_path", "");

		if (info.font_path != null) this._font_path.text = info.font_path;
		this._font_size.text = "";
		if (g_IDEProject.project != null)
			this._font_size.text = g_IDEProject.project.config.GetConfig("default_font_size", 15);

		if (info.font_size != null) this._font_size.text = info.font_size;
		if (info.red == null) this._red.text = 255;
		else this._red.text = ALittle.Math_Floor(info.red * 255);
		if (info.green == null) this._green.text = 255;
		else this._green.text = ALittle.Math_Floor(info.green * 255);
		if (info.blue == null) this._blue.text = 255;
		else this._blue.text = ALittle.Math_Floor(info.blue * 255);
	}
}

protected var g_IDEAttrTextDialog = new IDEAttrTextDialog();