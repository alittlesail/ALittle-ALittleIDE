
namespace ALittleIDE;

public class IDEImageSelectDialog : AUIPlugin.AUIFileSelectDialog
{
	public ctor(string title, ALittle.DisplayLayout layer, List<string> ext_list)
	{
		g_IDEProject.AddEventListener(this, this.HandleCloseProject);
		this.AddEventListener(this, this.HandleImageSelectRButtonDown);
	}
	
	private fun HandleCloseProject(IDEProjectCloseEvent event)
	{	
		if (this._dialog == null) return;
	
		this.HideDialog();
	}

	private fun HandleImageSelectRButtonDown(AUIPlugin.AUIFileSelectRightButtonDownEvent event)
	{
		var ext = ALittle.File_GetFileExtByPathAndUpper(event.path);
		if (ext != "PNG" && ext != "JPG")
		{
			var menu = new AUIPlugin.AUIRightMenu();
			menu.AddItem("删除", bind(this.HandleImageDeleteClick, this, event));
            menu.Show();
			return;
        }

		var menu = new AUIPlugin.AUIRightMenu();
		menu.AddItem("复制九宫格代码", bind(this.HandleImageCopyGrid9ImageCodeClick, this, event));
		menu.AddItem("复制图片代码", bind(this.HandleImageCopyImageCodeClick, this, event));
		menu.AddItem("图片裁剪", bind(this.HandleImageEditClick, this, event));
		menu.AddItem("删除", bind(this.HandleImageDeleteClick, this, event));
		menu.Show();
	}
	
	private fun HandleImageCopyGrid9ImageCodeClick(AUIPlugin.AUIFileSelectRightButtonDownEvent event)
	{
		var display_info = IDEUIUtility_GenerateGrid9ImageInfo(this.base_path.."/", event.path);
		if (display_info == null)
		{
			g_AUITool.ShowNotice("错误", "图片加载失败:"..cast<string>(event.path));
			return;
		}
		var copy_list = new List<IDEControlCopyInfo>();
		var info  = new IDEControlCopyInfo();
		info.index = 1;
		info.info = display_info;
		copy_list[1] = info;
		ALittle.System_SetClipboardText(ALittle.String_JsonEncode(copy_list));
	}
	
	private fun HandleImageCopyImageCodeClick(AUIPlugin.AUIFileSelectRightButtonDownEvent event)
	{
		var width = 100;
		var height = 100;
		var surface = carp.LoadCarpSurface(this.base_path.."/"..event.path);
		if (surface != null)
		{
			width = carp.GetCarpSurfaceWidth(surface);
			height = carp.GetCarpSurfaceHeight(surface);
			carp.FreeCarpSurface(surface);
		}

		var display_info = new ALittle.DisplayInfo();
		display_info.__class = "Image";
		display_info.texture_name = event.path;
		display_info.width_type = ALittle.UIEnumTypes.POS_ABS;
		display_info.width_value = width;
		display_info.height_type = ALittle.UIEnumTypes.POS_ABS;
		display_info.height_value = height;

		var info = new IDEControlCopyInfo();
		info.index = 1;
		info.info = display_info;
		var copy_list = new List<IDEControlCopyInfo>();
		copy_list[1] = info;
		ALittle.System_SetClipboardText(ALittle.String_JsonEncode(copy_list));
	}
	
	private fun HandleImageEditClick(AUIPlugin.AUIFileSelectRightButtonDownEvent event)
	{
		g_IDEEditImageDialog.ShowDialog(this.base_path.."/"..event.path, this.base_path);
	}
	
	private async fun HandleImageDeleteClick(AUIPlugin.AUIFileSelectRightButtonDownEvent event)
	{
		var tittle = "确定要永久删除该文件吗？";
		if (event.directory) tittle = "确定要永久删除该文件夹，以及子文件吗？";

		var result = g_AUITool.DeleteNotice("删除", tittle);
		if (result == AUIPlugin.AUIToolOption.YES)
		{
			if (event.directory)
				ALittle.File_DeleteDeepDir(this.base_path.."/"..event.path);
			else
				ALittle.File_DeleteFile(this.base_path.."/"..event.path);
			this.Refresh();
        }
	}
}

protected var g_IDEImageManagerDialog = new IDEImageSelectDialog("图片选择器", null, ["PNG", "JPG"]);
protected var g_IDEImageSelectDialog = new IDEImageSelectDialog("图片选择器", g_DialogLayer, ["PNG", "JPG"]);
protected var g_IDEEditImageDialog = new AUIPlugin.AUIEditImageDialog();